<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Others on A Moment's Rest</title><link>https://a-moment096.github.io/categories/others/</link><description>Recent content in Others on A Moment's Rest</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://a-moment096.github.io/categories/others/index.xml" rel="self" type="application/rss+xml"/><item><title>搭建 FRP 服务</title><link>https://a-moment096.github.io/p/%E6%90%AD%E5%BB%BA-frp-%E6%9C%8D%E5%8A%A1/</link><pubDate>Wed, 23 Jul 2025 13:26:16 +0800</pubDate><guid>https://a-moment096.github.io/p/%E6%90%AD%E5%BB%BA-frp-%E6%9C%8D%E5%8A%A1/</guid><description>&lt;img src="https://a-moment096.github.io/p/%E6%90%AD%E5%BB%BA-frp-%E6%9C%8D%E5%8A%A1/BagPipe.jpg" alt="Featured image of post 搭建 FRP 服务" /&gt;&lt;p&gt;&lt;em&gt;怎么连接个服务器还得先用 ToDesk 连上个 Windows 电脑，再从这个电脑上 ssh 进服务器呀！？受不鸟，自己搭个 FRP 服务吧&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;图为可爱的风笛小姐，据不可靠消息，应该是来自于画师 &lt;a class="link" href="https://weibo.com/u/5979033109" target="_blank" rel="noopener"
&gt;Liyu黎&lt;/a&gt; 老师画的 2022 音律联觉的贺图。既然如此，就配一首风笛小姐的个人 EP：《故乡的风》吧。&lt;/em&gt;&lt;/p&gt;
&lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"&gt;
&lt;style type="text/css"&gt;.dark-theme .aplayer{background:#212121}.dark-theme .aplayer.aplayer-withlist .aplayer-info{border-bottom-color:#5c5c5c}.dark-theme .aplayer.aplayer-fixed .aplayer-list{border-color:#5c5c5c}.dark-theme .aplayer .aplayer-body{background-color:#212121}.dark-theme .aplayer .aplayer-info{border-top-color:#212121}.dark-theme .aplayer .aplayer-info .aplayer-music .aplayer-title{color:#fff}.dark-theme .aplayer .aplayer-info .aplayer-music .aplayer-author{color:#fff}.dark-theme .aplayer .aplayer-info .aplayer-controller .aplayer-time{color:#eee}.dark-theme .aplayer .aplayer-info .aplayer-controller .aplayer-time .aplayer-icon path{fill:#eee}.dark-theme .aplayer .aplayer-list{background-color:#212121}.dark-theme .aplayer .aplayer-list::-webkit-scrollbar-thumb{background-color:#999}.dark-theme .aplayer .aplayer-list::-webkit-scrollbar-thumb:hover{background-color:#bbb}.dark-theme .aplayer .aplayer-list li{color:#fff;border-top-color:#666}.dark-theme .aplayer .aplayer-list li:hover{background:#4e4e4e}.dark-theme .aplayer .aplayer-list li.aplayer-list-light{background:#6c6c6c}.dark-theme .aplayer .aplayer-list li .aplayer-list-index{color:#ddd}.dark-theme .aplayer .aplayer-list li .aplayer-list-author{color:#ddd}.dark-theme .aplayer .aplayer-lrc{text-shadow:-1px -1px 0 #666}.dark-theme .aplayer .aplayer-lrc:before{background:-moz-linear-gradient(top, #212121 0%, rgba(33,33,33,0) 100%);background:-webkit-linear-gradient(top, #212121 0%, rgba(33,33,33,0) 100%);background:linear-gradient(to bottom, #212121 0%, rgba(33,33,33,0) 100%);filter:progid:DXImageTransform.Microsoft.gradient( startColorstr='#212121', endColorstr='#00212121',GradientType=0 )}.dark-theme .aplayer .aplayer-lrc:after{background:-moz-linear-gradient(top, rgba(33,33,33,0) 0%, rgba(33,33,33,0.8) 100%);background:-webkit-linear-gradient(top, rgba(33,33,33,0) 0%, rgba(33,33,33,0.8) 100%);background:linear-gradient(to bottom, rgba(33,33,33,0) 0%, rgba(33,33,33,0.8) 100%);filter:progid:DXImageTransform.Microsoft.gradient( startColorstr='#00212121', endColorstr='#cc212121',GradientType=0 )}.dark-theme .aplayer .aplayer-lrc p{color:#fff}.dark-theme .aplayer .aplayer-miniswitcher{background:#484848}.dark-theme .aplayer .aplayer-miniswitcher .aplayer-icon path{fill:#eee}&lt;/style&gt;
&lt;script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js"&gt;&lt;/script&gt;
&lt;script src="https://a-moment096.github.io/js/Meting.min.js"&gt;&lt;/script&gt;&lt;meting-js auto="https://music.163.com/#/album?id=86572348" theme="#2980b9" loop="none"&gt;&lt;/meting-js&gt;
&lt;h2 id="引子为什么要跳板机"&gt;引子：为什么要跳板机
&lt;/h2&gt;&lt;p&gt;为了方便提交任务，做相场计算，组里配了一台计算服务器，一个管理节点+两个计算节点，劲呀！然而坏消息是：组里没有多余的空间放置服务器了，只能托管到另一个老师那里。&lt;/p&gt;
&lt;p&gt;OK，没什么关系，给服务器配个公网IP，那不就和在自己组里一样咯？可是实际上并没有那样的好事，公网IP也不是想申请就申请的。课题组内貌似对网络配置这块不了解，也不打算了解，所以就只能交给装机的小哥处理。而他和那边老师协商后，决定采用的方案是：使用 ToDesk 连接到和服务器处于同一公网下的 Windows 电脑，再用那个 Windows 电脑 SSH 到服务器上。整体过程大概是这样的：&lt;/p&gt;
&lt;figure class="mermaid-container"&gt;
&lt;div class="mermaid"&gt;graph LR
subgraph "内网环境1"
Client[客户端&lt;br/&gt;我的电脑]
end
subgraph "内网环境2"
OtherUser[其他用户]
end
subgraph "内网环境3"
Windows[Windows电脑&lt;br/&gt;ToDesk远控]
Compute[计算服务器&lt;br/&gt;无公网IP]
end
Client --&gt;|ToDesk远控| Windows
Windows --&gt;|局域网SSH| Compute
OtherUser -.-&gt;|❌&lt;br/&gt;无法连接| Windows
classDef public fill:#e1f5fe
classDef private fill:#fff3e0
classDef deprecated fill:#ffebee
classDef forbidden stroke:#f44336,stroke-width:2px,stroke-dasharray:5
class Client public
class Compute private
class Windows deprecated
class OtherUser forbidden
&lt;/div&gt;
&lt;figcaption&gt;通过 Windows ToDesk 跳板连接示意图&lt;/figcaption&gt;
&lt;/figure&gt;&lt;p&gt;这个方案，说实在的感觉很蠢。一个服务器，搭载着多用户操作系统，竟然必须用 Windows 做跳板然后跳过去！？这不就意味着，如果有两个人同时使用服务器，我就会和对方产生会话冲突？而且如果有人盯着那台 Windows 电脑的屏幕，我的操作不就暴露地清清楚楚了！？怎么想都是很愚蠢的做法，不过也能理解：这应该（也许）是一个临时的解决方案。而后面谁来解决这个问题呢？&lt;/p&gt;
&lt;p&gt;那必须是我了！我们可以搭建一个 FRP（快速反向代理） 服务，让流量通过一个跳板服务器转发到计算服务器上，不再蠢蠢地堵在同一台 Windows 设备上。这样一来，每个人都可以自己自由地连接上这个服务器，只需要把流量交给反代服务器（跳板服务器），让它处理转发端口之类的，就可以啦。搞好之后的示意图大概是：&lt;/p&gt;
&lt;figure class="mermaid-container"&gt;
&lt;div class="mermaid"&gt;graph LR
subgraph "内网环境1"
Client[客户端&lt;br/&gt;我的电脑]
end
subgraph "内网环境2"
OtherUser[其他用户]
end
subgraph "外网环境"
FRPServer[FRP服务端&lt;br/&gt;公网IP中转]
end
subgraph "内网环境3"
Compute[计算服务器&lt;br/&gt;无公网IP]
end
Client --&gt;|SSH| FRPServer
OtherUser --&gt;|SSH| FRPServer
FRPServer --&gt;|FRP客户端&lt;br/&gt;反向代理| Compute
classDef public fill:#e1f5fe,stroke:#039be5
classDef private fill:#fff3e0,stroke:#fb8c00
classDef server fill:#e8f5e9,stroke:#43a047,stroke-width:2px
class Client,OtherUser public
class Compute private
class FRPServer server
&lt;/div&gt;
&lt;figcaption&gt;FRP 内网穿透网络架构示意图&lt;/figcaption&gt;
&lt;/figure&gt;&lt;p&gt;嗯哼，那就开始吧~&lt;/p&gt;
&lt;h2 id="搭建也许需要个-tldr"&gt;搭建：也许需要个 TL;DR
&lt;/h2&gt;&lt;p&gt;我觉得也许应该先写一下 FRP 技术是什么以及介绍一下这中间的网络通信过程是什么样的，然而我相信，来看这个博文的朋友应该都是需要一份切实可行的执行过程的。所以下面的第一步是：&lt;/p&gt;
&lt;h3 id="tldr"&gt;TL;DR
&lt;/h3&gt;&lt;p&gt;&lt;em&gt;下面的流程大量参考自开源教程：&lt;a class="link" href="https://github.com/CNFlyCat/UsefulTutorials/" target="_blank" rel="noopener"
&gt;Frp内网穿透搭建教学&lt;/a&gt;，内容非常详细，感觉这里不清楚的可以去看看&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;下面是我的解决过程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;租个服务器：在阿里云用学生认证白嫖三个月的便宜服务器，有个公网IP就行，待会儿会用这个IP&lt;/li&gt;
&lt;li&gt;先用 ToDesk 连到远程计算服务器上，然后用 &lt;code&gt;curl ifconfig.me&lt;/code&gt; 得到服务器所在公网的公网IP，待会儿会用到&lt;/li&gt;
&lt;li&gt;在计算服务器上下载 frp:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sh" data-lang="sh"&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt;1&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# 如果有 wget 的话：&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt;2&lt;/span&gt;&lt;span class="cl"&gt;wget https://github.com/fatedier/frp/releases/download/v0.61.1/frp_0.61.1_linux_amd64.tar.gz
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt;3&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# 如果没有 wget，可以试试 curl：&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt;4&lt;/span&gt;&lt;span class="cl"&gt;curl -LO https://github.com/fatedier/frp/releases/download/v0.61.1/frp_0.61.1_linux_amd64.tar.gz
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start="4"&gt;
&lt;li&gt;用 &lt;code&gt;tar&lt;/code&gt; 解压压缩包：&lt;code&gt;tar xzf frp_0.61.1_linux_amd64.tar.gz&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;进入文件夹，配置 &lt;code&gt;frpc.toml&lt;/code&gt;，内容为：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-toml" data-lang="toml"&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt; 1&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="c"&gt;# 服务端地址（这里要填你有公网IP的服务器的IP或者是服务器的域名）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt; 2&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="nx"&gt;serverAddr&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;192.xxx.x.x&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt; 3&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="c"&gt;# 服务器端口（Frp 服务端监听的端口）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt; 4&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="nx"&gt;serverPort&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;7000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt; 5&lt;/span&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt; 6&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="c"&gt;# 连接协议&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt; 7&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="nx"&gt;transport&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;protocol&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;tcp&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt; 8&lt;/span&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt; 9&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="c"&gt;# 代理配置&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt;10&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="nx"&gt;proxies&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt;11&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="c"&gt;# 代理名称（标识该代理的名称，根据你的喜好填写）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt;12&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;comp_server&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt;13&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;tcp&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt;14&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="nx"&gt;localIP&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;127.0.0.1&amp;#34;&lt;/span&gt; &lt;span class="c"&gt;#这里就是这个，代表本机IP&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt;15&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="nx"&gt;localPort&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt; &lt;span class="c"&gt;# 这个是 SSH 的默认端口&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt;16&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="nx"&gt;remotePort&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;6000&lt;/span&gt; &lt;span class="c"&gt;# 告诉 frps 把它收到的哪个端口流量转过来&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start="6"&gt;
&lt;li&gt;启动 frpc：&lt;code&gt;./frpc -c ./frpc.toml&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在公网服务器上进行类似操作，这里我没有改 &lt;code&gt;frps.toml&lt;/code&gt;，其中内容只有一行：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-toml" data-lang="toml"&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt;1&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="nx"&gt;bindPort&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;7000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start="8"&gt;
&lt;li&gt;
&lt;p&gt;启动 frps: &lt;code&gt;./frps -c ./frps.toml&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从第三台电脑测试链接：&lt;code&gt;ssh username@192.xxx.x.x -p 6000&lt;/code&gt;, 这会让你通过公网服务器的 &lt;code&gt;6000&lt;/code&gt; 端口把访问转发到计算服务器上。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;整个流程大概就是这样啦，看起来挺长的，实际上只需要寥寥几步就OK了。需要注意的是，这样的服务器端配置显得有些简陋，不过目前来讲是完全够用的。然而如果你需要更详细的配置，或者更完善的配置的话，可以参考上述的开源教程。另外还有，这个地方的 &lt;code&gt;7000&lt;/code&gt; 完全是默认的一个值，而这个值是可以自己选择的。一般来讲端口号会尽量选择比较大的数字（高位端口），目的主要是为了安全着想。如果这个地方你在上面的客户端使用的 &lt;code&gt;ServerPort&lt;/code&gt; 是别的端口号，请在下面的 &lt;code&gt;bindPort&lt;/code&gt; 中保持一致。&lt;/p&gt;
&lt;h3 id="流程图"&gt;流程图
&lt;/h3&gt;&lt;p&gt;&lt;del&gt;这个人在尝试过 Mermaid 之后就什么都想画个图了，原谅他吧。&lt;/del&gt;&lt;/p&gt;
&lt;figure class="mermaid-container"&gt;
&lt;div class="mermaid"&gt;flowchart TD
B[使用ToDesk连接服务器\n获取公网IP：curl ifconfig.me`]
B --&gt; C[下载frp工具\nwget/curl下载压缩包]
C --&gt; D[解压frp压缩包\ntar xzf命令]
D --&gt; E[配置frpc.toml\n设置serverAddr/serverPort等参数]
E --&gt; F[启动frpc客户端\n./frpc -c ./frpc.toml]
A[租用阿里云服务器\n获取公网IP] --&gt; H[配置frps.toml\n仅设置bindPort=7000]
H --&gt; I[启动frps服务端\n./frps -c ./frps.toml]
F --&gt; J[连接测试]
I --&gt; J
J --&gt; K[第三台电脑测试\nssh username@公网IP -p 6000]
style A fill:#f9f,stroke:#333
style B fill:#f9f,stroke:#333
style K fill:#bbf,stroke:#333
&lt;/div&gt;
&lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;&lt;p&gt;&lt;del&gt;（感觉上面的流程描述还是不如图清晰呀，还是图好）&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;所以，大概就是这样啦。如果你是误打误撞进了这个博客，正好想搭建一个 FRP 服务，上面的内容应该就足够啦。希望可以帮到你~&lt;/p&gt;
&lt;h2 id="解说环节"&gt;解说环节
&lt;/h2&gt;&lt;p&gt;有了 TL;DR，也许你可以从这些步骤上看到整个搭建过程的轮廓。然而这样或许还是不能解答一些疑惑：为什么这样这样再这样，就好了？所以这里简单讲解一下，每一步都是在干什么，以及要注意的点。虽然说这里要做解说，实际上也只是拾人牙慧，再对上面的内容进行一些简单的补充而已。还望大佬手下留情。&lt;/p&gt;
&lt;h3 id="so什么是-frp"&gt;So，什么是 FRP？
&lt;/h3&gt;&lt;p&gt;当遇到一个奇怪的，有着英文缩写的概念时，最应该从这个缩写的含义来展开。FRP，全称 Fast Reverse Proxy，也就是 “快速反向代理”。也许有人要问了，什么是代理，什么是反向代理，什么又是 “快速反向代理”？&lt;/p&gt;
&lt;p&gt;很可惜，我也是超级小白，只能斗胆分享一下自己的看法。代理这个词，一听就知道大概是什么样的过程：代替某个东西来受理某项业务。实际上在我的理解里，就是这么回事。不过在谈 “反向代理” 前，还是先聊聊可能大家更熟一些的 &lt;em&gt;正向代理&lt;/em&gt; 吧。它是指把流量交给某个服务，让所有服务的流量都从这里出去。大概就是：&lt;/p&gt;
&lt;figure class="mermaid-container"&gt;
&lt;div class="mermaid"&gt;graph TB
%% 正向代理
subgraph "正向代理"
User1[客户端] --&gt;|"1. 主动配置代理
(如浏览器设置)"| FProxy[正向代理服务器]
FProxy --&gt;|"2. 代访互联网"| Internet[目标网站]
end
classDef proxy fill:#c8e6c9,stroke:#4caf50
class FProxy,RProxy proxy
&lt;/div&gt;
&lt;figcaption&gt;正向代理示意图&lt;/figcaption&gt;
&lt;/figure&gt;&lt;p&gt;这里正向代理服务器就是中间的一层马甲，代替客户端进行访问，访问后再把内容反传给客户端。这样一来，目标网站就不太容易知道代理服务器的背后是谁，形成了一定的匿名性。&lt;/p&gt;
&lt;p&gt;那么反向代理呢？与正向代理正好相反，正向代理是由代理服务器做客户端的马甲，而反向代理则是让代理服务器给目标服务器打工。反代服务器会接收到客户端的请求再告诉服务端，反代服务器会负责把内容转发到对应的位置，交给服务端，而服务端后面要与客户端通信，还是得走反代服务器。图形表示的话就是这样的：&lt;/p&gt;
&lt;figure class="mermaid-container"&gt;
&lt;div class="mermaid"&gt;graph TB
%% 反向代理
subgraph "反向代理"
User2[客户端] --&gt;|"1. 直接访问"| RProxy[反向代理服务器]
RProxy --&gt;|"2. 转发给内网"| Backend[后端服务器]
end
classDef proxy fill:#c8e6c9,stroke:#4caf50
class FProxy,RProxy proxy
&lt;/div&gt;
&lt;figcaption&gt;反向代理示意图&lt;/figcaption&gt;
&lt;/figure&gt;&lt;p&gt;也就是说，正向代理的情况下，目标网站只知道有个服务器在访问它；反向代理情况下，客户端不直接连到后端服务器，而是直接连接到反代服务器上。我们的需求，是让自己的电脑能跨过计算服务器的内网屏障，用 SSH 连接上去。因此，我们要做的是让服务器想办法把我的请求告诉计算服务器，也就是采用反向代理，让反代服务器从一个端口接收我的请求流量，然后走另一个端口，把流量转发给计算服务器负责监听 SSH 请求的端口，就可以了。&lt;/p&gt;
&lt;p&gt;那么 “快速反向代理” 又是啥？就我浅薄的认知而言，“反向代理” 不是一个特别特殊的东西，很多人都可以尝试自己的实现方式。而 “FRP” 是其中一个非常受欢迎的选择。至于 “快速”， 应该是说它速度快？由于我只知道这么一个，所以咱们还是不要深究了。&lt;/p&gt;
&lt;p&gt;当你下载好 FRP 的包后，你应该会看到里面没有多少文件。两个可执行文件：一个 &lt;code&gt;frpc&lt;/code&gt; 作为客户端，一个 &lt;code&gt;frps&lt;/code&gt; 作为服务端，以及对应的配置文件，几乎就这样，内容很简单。它的工作方式，就是在让 &lt;code&gt;frps&lt;/code&gt; 接收流量，然后转发到拥有 &lt;code&gt;frpc&lt;/code&gt; 的设备上。请注意，虽然这里说是 “客户端”，但实际上是那个计算服务器，而非本地的电脑。本地电脑要做的几乎只有保证自己能 &lt;code&gt;ssh&lt;/code&gt; 上别的机器，这就可以了。&lt;/p&gt;
&lt;h3 id="来个服务器"&gt;来个服务器
&lt;/h3&gt;&lt;p&gt;首先是租用服务器。只需要最低配置的服务器就可以运行 FRP 服务了（我猜，因为这个转发过程我很难想象需要多大的内存和多么强大的算力）。在租用的时候可以注意看看各家云服务器厂商都怎么提供的优惠，特别是学生优惠。一般来讲，学生都有一些不错的优惠或者白嫖额度，可以先用着试试看。服务器的密码要注意&lt;strong&gt;使用强密码&lt;/strong&gt;，不要用什么个人信息之类的。因为公网服务器毕竟是暴露在危险的公网上的，简单的密码很容易被强行爆破，如果密码里面有一些个人信息（生日，电话，QQ什么的），那就一锅端了。总之，公网上一切小心，密码要搞复杂点，记在什么纸上或者什么密码服务器里都可以。&lt;/p&gt;
&lt;p&gt;配好服务器之后，可以考虑只使用 SSH 加密钥来登录。密钥最大的好处有两个，一个是可以免密码，另一个就是安全。由于 SSH 只会允许拥有通过验证的机器来登录，验证方式是查看是否具有可以匹配的私钥。本来想在这里大谈特谈 “加密，私钥与 SSH”，后来想了想，几乎没什么太大关系呀！干脆算了，能正常登录，就是大成功！具体操作就是，首先先用服务器供应商提供的方式登录进去，然后打开一个叫 &lt;code&gt;authorized_keys&lt;/code&gt; 的文件，它的路径是 &lt;code&gt;~/.ssh/authorized_keys&lt;/code&gt;（如果没有，也很正常，自己创建一个是对的），待会儿会往里面写你的公钥。接下来就是在你日常使用的电脑上进行操作，打开终端使用 &lt;code&gt;ssh-keygen&lt;/code&gt;，然后一路回车，就可以创建一份独属于你的密钥对。这里一路默认会创建一个没有口令的，使用默认加密方式的密钥。&lt;/p&gt;
&lt;p&gt;接下来我们打开 &lt;strong&gt;公钥&lt;/strong&gt; 的内容，比如用 &lt;code&gt;cat ~/.ssh/id_ed25519.pub&lt;/code&gt; 等方式，把内容输出出来。要注意的是，你要打开的是 &lt;strong&gt;公钥&lt;/strong&gt;，也就是文件后缀带个 &lt;code&gt;.pub&lt;/code&gt; 的文件。走网络传递的信息应该是公钥这样即便被大家知道也没什么所谓的东西，而非你重要的，只能单向证明你身份的私钥。文件内容应该是好长的一行甚至好几行，大体结构应该是三段：&lt;code&gt;&amp;lt;type&amp;gt; &amp;lt;key&amp;gt; &amp;lt;user&amp;gt;@&amp;lt;machine&amp;gt;&lt;/code&gt; 的形式。第一个 &lt;code&gt;&amp;lt;type&amp;gt;&lt;/code&gt; 指明了是什么加密协议，中间是最主要的部分，而最后是为了方便用户辨认 “这是从哪里来的公钥” 的字段。如果你觉得最后一段说明力不强，可以大胆修改。然而当务之急，应该是把这段内容复制下来，然后粘贴在服务器端的 &lt;code&gt;authorized_keys&lt;/code&gt; 文件里。&lt;/p&gt;
&lt;p&gt;这样就算搞定啦，可以试着从自己电脑来 &lt;code&gt;ssh&lt;/code&gt; 上服务器了。如果没有问你要密码的话，那就一切 OK 了。不过要注意的是，如果你是第一次登录的话，你电脑端的 &lt;code&gt;ssh&lt;/code&gt; 客户端会告诉你，你从来没有连接过这个主机，你是否要信任它？并且会让你输入 &lt;code&gt;yes&lt;/code&gt;或&lt;code&gt;no&lt;/code&gt;，或者是打印 &lt;code&gt;finger print&lt;/code&gt;。作为安全保险，可以仔细思考一下你登录的位置对不对。没啥问题的话 &lt;strong&gt;输入 &lt;code&gt;yes&lt;/code&gt;&lt;/strong&gt; 来确认。这里默认的值是 &lt;code&gt;no&lt;/code&gt; 哦，如果你手快/以为默认是 &lt;code&gt;yes&lt;/code&gt; 的话，那就只能重连一次并且记得输入 &lt;code&gt;yes&lt;/code&gt; 了。&lt;/p&gt;
&lt;p&gt;总之，服务器这块主要是要能搞到。登录什么的其实不太难，&lt;code&gt;ssh&lt;/code&gt; 算是配置相对容易的，对用户比较友好的工具了。当前的最后一个要在服务器上做的事则是获取服务器的公网 IP。一般你的管理面板会告诉你对外 IP 是哪个。你可以记住它或者怎么样，总之待会儿要用。如果你喜欢命令行操作，那也可以试试 &lt;code&gt;curl ifconfig.me&lt;/code&gt; 这个命令。&lt;code&gt;ifconfig.me&lt;/code&gt; 提供了显示访问者公网 IP 的服务，你可以通过这个脚本拿到服务器的公网IP。那么，在能保证方便快捷地连接到跳板服务器之后，我们就要开始下一步：&lt;/p&gt;
&lt;h3 id="计算服务器配置"&gt;计算服务器配置
&lt;/h3&gt;&lt;p&gt;我们来配置好计算服务器。上面说可以用远控软件来操作远程服务器，其实那是我们一开始的工作方式。理论上来讲，我们是不需要计算服务器 &lt;em&gt;被&lt;/em&gt; 外界访问到，而是通过搭建的 FRP 服务来 &lt;em&gt;访问外界&lt;/em&gt;，再让外界传到别的地方，从而建立数据通路。所以，你只要能把 &lt;code&gt;frpc&lt;/code&gt; 的客户端以及对应的配置文件塞到计算服务器上能上网且你喜欢的位置，就可以了。&lt;/p&gt;
&lt;p&gt;由于我们的目的就是通过 FRP 来通过跳板机访问计算服务器，因此自然不会考虑直接 &lt;code&gt;ssh&lt;/code&gt; 上去。这里的做法是先走原来的老方法，用 ToDesk 来对远程服务器进行配置。这个商业软件我就不介绍了，总之就是一路操作到进入远程服务器。&lt;/p&gt;
&lt;p&gt;在这之后，就是要下载 FRP 了。我很难说下载方式简单，因为 &lt;code&gt;curl&lt;/code&gt; 和 &lt;code&gt;wget&lt;/code&gt; 命令我到现在还没有搞明白具体是个怎么个事儿…… 不过，这两行命令都是没有问题的，也就是：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sh" data-lang="sh"&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt;1&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# 如果有 wget 的话：&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt;2&lt;/span&gt;&lt;span class="cl"&gt;wget https://github.com/fatedier/frp/releases/download/v0.61.1/frp_0.61.1_linux_amd64.tar.gz
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt;3&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# 如果没有 wget，可以试试 curl：&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt;4&lt;/span&gt;&lt;span class="cl"&gt;curl -LO https://github.com/fatedier/frp/releases/download/v0.61.1/frp_0.61.1_linux_amd64.tar.gz
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中的 &lt;code&gt;wget&lt;/code&gt; 根据 &lt;code&gt;man wget&lt;/code&gt; 的回答，它是&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Wget - The non-interactive network downloader&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;，即非交互式的网络下载器。它的参数就相对简单了，后面跟上要下载的内容的网址就可以了。而 &lt;code&gt;curl&lt;/code&gt; 就更复杂一些。根据 &lt;code&gt;man curl&lt;/code&gt;，它是&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;curl - transfer a URL&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;，是传输 URL 连接的。默认情况下，它会把获取到的东西直接输出在屏幕上。而由于我们是要下载文件，所以需要指定 &lt;code&gt;-O&lt;/code&gt; 参数来表示 &lt;em&gt;把内容下载到本地的同名文件中&lt;/em&gt;。而这里的 &lt;code&gt;-L&lt;/code&gt; 参数则是告诉 &lt;code&gt;curl&lt;/code&gt; 跟随连接的重定向，因为可能这个连接实际上指向的资源不是这里，而是另一个地方。顺带一提，如果指定 &lt;code&gt;-o&lt;/code&gt; （小写的 o）的话则是 &lt;em&gt;把内容下载到下面这个文件里&lt;/em&gt; 的意思，也就是 &lt;code&gt;-o&lt;/code&gt; 后面应该跟上一个自己指定的文件名。&lt;/p&gt;
&lt;p&gt;再下来就是解压缩。下载好的东西是一个由 &lt;code&gt;tar&lt;/code&gt; 打包好并经过 &lt;code&gt;gzip&lt;/code&gt; 压缩的文件。所以我们应该先解压缩为一个单纯的 &lt;code&gt;.tar&lt;/code&gt; 文件，再解包开变成真实的内容。然而，好消息是，&lt;code&gt;tar&lt;/code&gt; 这个命令已经内置了调用包括 &lt;code&gt;gzip&lt;/code&gt; 在内的压缩/解压缩软件，我们只需要使用 &lt;code&gt;tar -xzf frp_0.61.1_linux_amd64.tar.gz&lt;/code&gt; 就可以了。其中的 &lt;code&gt;-xzf&lt;/code&gt; 分别代表 &lt;em&gt;提取&lt;/em&gt;，&lt;em&gt;调用&lt;/em&gt;&lt;code&gt;gzip&lt;/code&gt;&lt;em&gt;工具&lt;/em&gt; 以及 &lt;em&gt;指定文件路径&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;随后我们就可以进入解包得到的文件夹内，里面的 &lt;code&gt;frpc&lt;/code&gt; 就是我们要使用的软件，而 &lt;code&gt;frpc.toml&lt;/code&gt; 则是对应的配置文件。剩下的内容可以删掉，也可以想办法提取出来一会儿挪给反代服务器。在计算服务器上我们只需要用到 &lt;code&gt;frpc&lt;/code&gt; 和它的配置文件就可以了。&lt;/p&gt;
&lt;p&gt;上面的配置文件里有一些注释，其实写的挺详细的了。我也是只提供了最基础的信息，告诉 &lt;code&gt;frpc&lt;/code&gt; 它对应的要连的 &lt;code&gt;frps&lt;/code&gt; 在哪里，走哪个端口通信；&lt;code&gt;frps&lt;/code&gt; 应该从哪里接收转发向这儿的流量，流量是什么类型的，转发给哪个端口，然后给这个小配置写个名字方便辨认。就是这样。&lt;/p&gt;
&lt;p&gt;到这里，计算服务器端基本就配置好了。我们可以暂时搁置，然后转向反代服务器（公网服务器）端的配置。&lt;/p&gt;
&lt;h3 id="反代服务器配置以及尝试链接"&gt;反代服务器配置，以及尝试链接
&lt;/h3&gt;&lt;p&gt;一开始还是一样咯，下载好 &lt;code&gt;frp&lt;/code&gt; 的包，然后解包出来，准备设置 &lt;code&gt;frps.toml&lt;/code&gt;。然而对于 &lt;code&gt;frps&lt;/code&gt; 来讲，它的设置就相对简单很多了。这里只有一行，告诉 &lt;code&gt;frps&lt;/code&gt; 它应该监听用哪个端口和 &lt;code&gt;frpc&lt;/code&gt; 进行通信，就可以了。是不是很简单？&lt;/p&gt;
&lt;p&gt;在这之后，我们就可以试着来启动这两个程序了。请先在反代服务器端启动 &lt;code&gt;frps&lt;/code&gt;，命令是：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sh" data-lang="sh"&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt;1&lt;/span&gt;&lt;span class="cl"&gt;./frps -c ./frps.toml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这时候你应该能看到一些输出的内容，先不用管。紧接着在计算服务器端启动 &lt;code&gt;frpc&lt;/code&gt;，命令是：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sh" data-lang="sh"&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt;1&lt;/span&gt;&lt;span class="cl"&gt;./frpc -c ./frpc.toml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里的 &lt;code&gt;-c&lt;/code&gt; 都是用来指定配置文件路径的。这时候如果顺利的话，你会看到计算服务器这里显示连接成功的信息，并且不会退出了。而反代服务器那边则同样会显示连接成功，同样，也不会退出。这样一来，就基本宣布大功告成了。&lt;/p&gt;
&lt;p&gt;然而，事事如意可太难了。最常见的问题就是 frpc 告诉你它连不上。这个时候请先检查反代服务器的防火墙设置。有很大的可能反代服务器屏蔽了 FRP 的通信端口，或者把你的地址排除在外了。这个时候请先把防火墙的规则放宽一些。&lt;/p&gt;
&lt;p&gt;如果 &lt;code&gt;frpc&lt;/code&gt; 和 &lt;code&gt;frps&lt;/code&gt; 连接成功了，我们就可以尝试用 &lt;code&gt;ssh&lt;/code&gt; 访问反代服务器的对应端口，来尝试链接计算服务器了。参考上面的配置，我们要求反代服务器把它从 &lt;code&gt;6000&lt;/code&gt; 端口接收到的流量转发给计算服务器。因此，我们使用&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-fallback" data-lang="fallback"&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt;1&lt;/span&gt;&lt;span class="cl"&gt;ssh &amp;lt;username&amp;gt;@&amp;lt;frps_ip&amp;gt; -p 6000
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;即可进行连接。其中的 &lt;code&gt;-p&lt;/code&gt; 就是告诉 &lt;code&gt;ssh&lt;/code&gt; 你要连接的是哪个端口，否则 &lt;code&gt;ssh&lt;/code&gt; 会默认走 &lt;code&gt;22&lt;/code&gt; 端口进行连接。这时候连接可能依然会让你输入密码，随后配置好密钥连接就可以了。至此，基本就已经是配置好 FRP 了。&lt;/p&gt;
&lt;h2 id="一点额外工作"&gt;一点额外工作
&lt;/h2&gt;&lt;h3 id="把-frp-注册为服务"&gt;把 FRP 注册为服务
&lt;/h3&gt;&lt;p&gt;然而这还是有一些问题。比如，当 &lt;code&gt;frpc&lt;/code&gt; 没有连接上 &lt;code&gt;frps&lt;/code&gt; 的时候，它会直接罢工，甚至不愿意尝试重连一下。而且，作为系统层面的一个应用，我们希望它持续挂载在后台运行。上面的方式会让 &lt;code&gt;frpc&lt;/code&gt; 和 &lt;code&gt;frps&lt;/code&gt; 占住当前的 shell，什么别的操作都不行了。考虑多种方案后，我认为最好的方式就是给二者注册 systemd 服务（如果两个机器都支持 systemd 的话）。下面是我给 &lt;code&gt;frpc&lt;/code&gt; 写的 systemd 服务：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-gdscript3" data-lang="gdscript3"&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt; 1&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Unit&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt; 2&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;Description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Frp&lt;/span&gt; &lt;span class="n"&gt;Client&lt;/span&gt; &lt;span class="n"&gt;Service&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt; 3&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;After&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;network&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt; 4&lt;/span&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt; 5&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Service&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt; 6&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;simple&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt; 7&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt; 8&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;Restart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;failure&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt; 9&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;RestartSec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt;10&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;ExecStart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;frpc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;frp_0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;61.0&lt;/span&gt;&lt;span class="n"&gt;_linux_amd64&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;frpc&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;frpc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;frp_0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;61.0&lt;/span&gt;&lt;span class="n"&gt;_linux_amd64&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;frpc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toml&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt;11&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;ExecReload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;frpc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;frp_0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;61.0&lt;/span&gt;&lt;span class="n"&gt;_linux_amd64&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;frpc&lt;/span&gt; &lt;span class="n"&gt;reload&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;frpc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;frp_0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;61.0&lt;/span&gt;&lt;span class="n"&gt;_linux_amd64&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;frpc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toml&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt;12&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;LimitNOFILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;65535&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt;13&lt;/span&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt;14&lt;/span&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt;15&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;NoNewPrivileges&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt;16&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;PrivateTmp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt;17&lt;/span&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt;18&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Install&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt;19&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;WantedBy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;multi&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面的内容基本就是在说，这个服务显示的名字是什么，启动前置需要什么，服务的类型，启动服务的用户，重启服务的条件和间隔时间，启动时要用什么命令；重启服务时要用什么命令，等等等等。这些内容被保存在了 &lt;code&gt;/etc/systemd/system/frpc.service&lt;/code&gt; 中。为了方便管理，可以用 &lt;code&gt;ln -s /etc/systemd/system/frpc.service &amp;lt;destination of link&amp;gt;&lt;/code&gt; 来把这个服务文件软连接到 &lt;code&gt;frpc&lt;/code&gt; 所在的文件夹下。此处的 &lt;code&gt;-s&lt;/code&gt; 是说创建的链接类型是软链接，否则 &lt;code&gt;ln&lt;/code&gt; 默认创建的是硬链接，这就没什么必要了。&lt;/p&gt;
&lt;p&gt;写好了之后可以通过 &lt;code&gt;systemctl enable --now &amp;lt;destination of link&amp;gt;&lt;/code&gt; 来启动这个服务。其中 &lt;code&gt;enable&lt;/code&gt; 是说你要把这个服务注册进去，让系统启动的时候顺带启动这个服务，而 &lt;code&gt;--now&lt;/code&gt; 的含义则是让 &lt;code&gt;systemd&lt;/code&gt; 立刻启动这个服务。平时检查连接状态可以使用 &lt;code&gt;journalctl -u frpc.service -f&lt;/code&gt; 来查看实时日志（也会打印出最近的几行），也可以使用 &lt;code&gt;-a&lt;/code&gt; 参数替换 &lt;code&gt;-f&lt;/code&gt; 参数来打开所有记录下的日志。&lt;/p&gt;
&lt;p&gt;在反代服务器上也类似，可以写这么一个服务然后启动。注意要把里面对应的内容替换掉，比如软件路径等。这时候再试试登录，应该没有什么阻碍。&lt;/p&gt;
&lt;h3 id="设置防火墙规则"&gt;设置防火墙规则
&lt;/h3&gt;&lt;p&gt;上面这套默认的配置，应该是会允许 &lt;strong&gt;所有的IP&lt;/strong&gt; 来访问公网 FRP 服务器的 &lt;strong&gt;所有的端口&lt;/strong&gt; 的。如果你像我一样，这个服务只是自用来连接个内网服务器的，请对防火墙进行合理的设置，防止被暴力扫描端口并尝试密码爆破。具体设置方法请参考你租赁服务器的服务器提供商，不过大概都是让你选择某个 IP 给它禁止掉，或者允许它。&lt;/p&gt;
&lt;p&gt;现在的防火墙几乎都是支持白名单模式的。你可以像我一样，先禁用掉所有的 IP 访问任何一个端口，再允许任何的 IP 访问 SSH 的通信端口，再接着允许计算服务器的 IP 访问它与反代服务器交换信息的端口，按上面的例子的话就是 &lt;code&gt;7000&lt;/code&gt; 端口，以及允许你平时尝试访问计算服务器的 IP 来访问 &lt;code&gt;6000&lt;/code&gt; 端口，如果你是让 &lt;code&gt;frps&lt;/code&gt; 用 &lt;code&gt;6000&lt;/code&gt; 向 &lt;code&gt;frpc&lt;/code&gt; 转发流量的话。&lt;/p&gt;
&lt;p&gt;这样配置好之后会把访问权限控制到近乎最小化。虽然会带来一定的麻烦（比如 IP 变动的话就需要上控制台修改防火墙规则），但是安全性上会很有保障。&lt;/p&gt;
&lt;h2 id="结尾"&gt;结尾
&lt;/h2&gt;&lt;p&gt;这个 FRP 服务我是在五一假期期间搭建起来的。本来说，一边搭建，一边写这个博客的。结果却变成了搭好之后懒得写，直到现在（7月23日，暑假）才想起写。唉，拖延症。&lt;/p&gt;
&lt;p&gt;实际上，FRP 的使用方式远不局限于我上面写的这些。甚至如果你愿意点进上面贴出的那个教程连接，就会发现他写的会更加详细，配置项会更加复杂。不过，因为我的需求足够简单，所以我的配置也相对简单很多。&lt;/p&gt;
&lt;p&gt;要提醒的是，防火墙其实也许不用设置得像我这里写的，这么严格。然而一定要留个心眼，毕竟网上坏人真的很多。比如我搭建好 FRP 服务的当天晚上就遭到了大洋彼岸朋友的亲切扫描，扫出端口之后就是一通尝试，用了什么 root，admin，user 等的账户名以及一先干就知道的一大堆弱密码来尝试连接进服务器。好消息是没有试出来，被我用防火墙给 ban 了。但还是给我惊出了一身冷汗。害人之心不可有，防人之心不可无呀。&lt;/p&gt;
&lt;p&gt;还有要说的是，有一些场景是不可以使用 FRP 服务或者类似的远程访问的服务的。没错，向日葵，ToDesk 这类也不行。网上是有使用类似服务结果酿成大祸的情况的。在使用这类服务前，还是要先三思呀。&lt;/p&gt;
&lt;p&gt;最后，一如既往地，辛苦你看到这里。感谢您的支持，也同时祝您生活愉快~&lt;/p&gt;</description></item><item><title>安装 Arch Linux，但是笔记本物理机</title><link>https://a-moment096.github.io/p/%E5%AE%89%E8%A3%85-arch-linux%E4%BD%86%E6%98%AF%E7%AC%94%E8%AE%B0%E6%9C%AC%E7%89%A9%E7%90%86%E6%9C%BA/</link><pubDate>Fri, 02 May 2025 16:12:04 +0800</pubDate><guid>https://a-moment096.github.io/p/%E5%AE%89%E8%A3%85-arch-linux%E4%BD%86%E6%98%AF%E7%AC%94%E8%AE%B0%E6%9C%AC%E7%89%A9%E7%90%86%E6%9C%BA/</guid><description>&lt;img src="https://a-moment096.github.io/p/%E5%AE%89%E8%A3%85-arch-linux%E4%BD%86%E6%98%AF%E7%AC%94%E8%AE%B0%E6%9C%AC%E7%89%A9%E7%90%86%E6%9C%BA/imgs/Alice.png" alt="Featured image of post 安装 Arch Linux，但是笔记本物理机" /&gt;&lt;p&gt;&lt;em&gt;之前在虚拟机上面装的 Arch Linux 根本不过瘾（搞笑，你根本就没更完(❌)），这次就把自己的小轻薄改成 Arch 好了。顺带，也记录一下实体机上安装可能会遇到的坑？&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;头图出自 R Sound Design 的新曲 《アリス？》，一首很轻快的 V曲~&lt;/em&gt;&lt;/p&gt;
&lt;!--
&lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"&gt;
&lt;style type="text/css"&gt;.dark-theme .aplayer{background:#212121}.dark-theme .aplayer.aplayer-withlist .aplayer-info{border-bottom-color:#5c5c5c}.dark-theme .aplayer.aplayer-fixed .aplayer-list{border-color:#5c5c5c}.dark-theme .aplayer .aplayer-body{background-color:#212121}.dark-theme .aplayer .aplayer-info{border-top-color:#212121}.dark-theme .aplayer .aplayer-info .aplayer-music .aplayer-title{color:#fff}.dark-theme .aplayer .aplayer-info .aplayer-music .aplayer-author{color:#fff}.dark-theme .aplayer .aplayer-info .aplayer-controller .aplayer-time{color:#eee}.dark-theme .aplayer .aplayer-info .aplayer-controller .aplayer-time .aplayer-icon path{fill:#eee}.dark-theme .aplayer .aplayer-list{background-color:#212121}.dark-theme .aplayer .aplayer-list::-webkit-scrollbar-thumb{background-color:#999}.dark-theme .aplayer .aplayer-list::-webkit-scrollbar-thumb:hover{background-color:#bbb}.dark-theme .aplayer .aplayer-list li{color:#fff;border-top-color:#666}.dark-theme .aplayer .aplayer-list li:hover{background:#4e4e4e}.dark-theme .aplayer .aplayer-list li.aplayer-list-light{background:#6c6c6c}.dark-theme .aplayer .aplayer-list li .aplayer-list-index{color:#ddd}.dark-theme .aplayer .aplayer-list li .aplayer-list-author{color:#ddd}.dark-theme .aplayer .aplayer-lrc{text-shadow:-1px -1px 0 #666}.dark-theme .aplayer .aplayer-lrc:before{background:-moz-linear-gradient(top, #212121 0%, rgba(33,33,33,0) 100%);background:-webkit-linear-gradient(top, #212121 0%, rgba(33,33,33,0) 100%);background:linear-gradient(to bottom, #212121 0%, rgba(33,33,33,0) 100%);filter:progid:DXImageTransform.Microsoft.gradient( startColorstr='#212121', endColorstr='#00212121',GradientType=0 )}.dark-theme .aplayer .aplayer-lrc:after{background:-moz-linear-gradient(top, rgba(33,33,33,0) 0%, rgba(33,33,33,0.8) 100%);background:-webkit-linear-gradient(top, rgba(33,33,33,0) 0%, rgba(33,33,33,0.8) 100%);background:linear-gradient(to bottom, rgba(33,33,33,0) 0%, rgba(33,33,33,0.8) 100%);filter:progid:DXImageTransform.Microsoft.gradient( startColorstr='#00212121', endColorstr='#cc212121',GradientType=0 )}.dark-theme .aplayer .aplayer-lrc p{color:#fff}.dark-theme .aplayer .aplayer-miniswitcher{background:#484848}.dark-theme .aplayer .aplayer-miniswitcher .aplayer-icon path{fill:#eee}&lt;/style&gt;
&lt;script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js"&gt;&lt;/script&gt;
&lt;script src="https://a-moment096.github.io/js/Meting.min.js"&gt;&lt;/script&gt;&lt;meting-js auto="https://music.163.com/#/song?id=750876" theme="#2980b9" loop="none"&gt;&lt;/meting-js&gt; --&gt;
&lt;p&gt;&lt;em&gt;很可惜 网易云/QQ音乐 都暂时没有这首歌，所以只能劳驾移步B站欣赏了。一旦有更新就会贴在这里的&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;B站&lt;a class="link" href="https://www.bilibili.com/video/BV1UtV5zqEjC/" target="_blank" rel="noopener"
&gt;投稿&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="引子我好急怎么耗电这么大"&gt;引子：我好急，怎么耗电这么大
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;亲爱的笔记本：&lt;/p&gt;
&lt;p style="text-indent: 50px"&gt;插电如面，自从我们相逢已有一年有余。上次见面，仿佛还是上次。传统派的我那时我刚刚给你刷上 Windows 10 系统，因为 Windows 11 的审美实在是在狠狠强碱我的眼睛。我们一路克服了艰难险阻，安装了各种乱七八糟的驱动，最后终于是让你成功跑了起来。虽然你的内存不大，硬盘不多，CPU 一般，显卡集成，但你要相信我，我心里面是有你的。&lt;/p&gt;
&lt;p style="text-indent: 50px"&gt;然而，你身上的 Windows 10 虽然让我倍感熟悉，你的耗电量实在是高得吓人。我接受不了一旦不插电就几乎是和时间赛跑的工作流。我将这一切归咎于可恶的微软，可恶的 Windows 10。这不是你的错，但是我还是想告诉你：你马上就会搭载一个新的系统。她轻便灵巧的同时，又大胆火辣，相信你一定会和她打成一片的。&lt;/p&gt;
&lt;p align="right"&gt;Love, &lt;/p&gt;
&lt;p align="right"&gt;A Moment&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;美丽的五一假期，不折腾点狠活儿实在是说不过去。看着越来越不顺眼的 Windows 10 笔记本，以及我的心逐渐被 Linux（特指 Arch Linux）所俘获，我决定：干掉 Windows 10, 彻底迎接 Arch Linux。想必有了之前安装 Arch Linux 的经验，这次的安装之旅肯定是一马平川了。开始吧。&lt;/p&gt;
&lt;h2 id="准备资料备份以及准备启动盘"&gt;准备：资料备份以及准备启动盘
&lt;/h2&gt;&lt;p&gt;首先肯定是先把电脑上已有的资料都备份好。其实说实话没太多文件，主要是两个没打完的 Gal 吧（心虚），因为大部分的文件都其实已经搞到台式机上面了。一开始是想着把这些文件放在一块精心规划的小硬盘上，安装的时候不格式化就行了，但是感觉还是有点点点点危险，所以干脆还是挪到另一台机器上，把这台小本的硬盘全部格式化了得了。不过也许我应该考虑更加智能的备份方案？算了，以后再考虑（挖坑）。&lt;/p&gt;
&lt;p&gt;其次就是准备启动盘。本来这次想要换一种安装媒介来着，比如光盘？（没错我有光盘刻录机，为了听 CD 买的 ()），结果还是嫌麻烦，放弃了。给虚拟机安装的时候不是已经有了镜像了吗？为什么不直接用呢？至于为什么没有下载最新的（最新的就是昨天刚出的，5月1日版本），是因为我刚准备下载的时候看到最上面一行小字：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://a-moment096.github.io/p/%E5%AE%89%E8%A3%85-arch-linux%E4%BD%86%E6%98%AF%E7%AC%94%E8%AE%B0%E6%9C%AC%E7%89%A9%E7%90%86%E6%9C%BA/imgs/no_need_for_download.png"
width="1277"
height="133"
srcset="https://a-moment096.github.io/p/%E5%AE%89%E8%A3%85-arch-linux%E4%BD%86%E6%98%AF%E7%AC%94%E8%AE%B0%E6%9C%AC%E7%89%A9%E7%90%86%E6%9C%BA/imgs/no_need_for_download_hu_7fda391d774b472e.png 480w, https://a-moment096.github.io/p/%E5%AE%89%E8%A3%85-arch-linux%E4%BD%86%E6%98%AF%E7%AC%94%E8%AE%B0%E6%9C%AC%E7%89%A9%E7%90%86%E6%9C%BA/imgs/no_need_for_download_hu_d075c299b95d14fd.png 1024w"
loading="lazy"
alt="安装好再更新不挺好？（滚挂警告）"
class="gallery-image"
data-flex-grow="960"
data-flex-basis="2304px"
&gt;&lt;/p&gt;
&lt;p&gt;So, why not?&lt;/p&gt;
&lt;p&gt;镜像依旧是用 &lt;code&gt;rufus&lt;/code&gt; 烧录到陪伴了我6+年的小U盘上，什么格式化之类的 &lt;code&gt;rufus&lt;/code&gt; 会自动帮我搞好的。中间有个小插曲好像是 &lt;code&gt;rufus&lt;/code&gt; 不太支持最新的 syslinux 版本，需要额外下载两个小库。无所谓（）我选择相信。&lt;/p&gt;
&lt;p&gt;到这里，基本上就已经准备好安装工作了。相信根据这些东西，来个老手估计三下五除二就安装好整个系统了。当然，我是新手，还是一步步来吧。这大概也是这篇（以及上一篇）文章的目的：记录自己安装系统时蠢蠢的样子。&lt;/p&gt;
&lt;h2 id="开始启动安装引导咯"&gt;开始：启动安装引导咯~
&lt;/h2&gt;&lt;h3 id="先进安装引导再说吧"&gt;先进安装引导再说吧
&lt;/h3&gt;&lt;p&gt;激动的心，颤抖的手，插入U盘后从U盘启动会不会有？&lt;/p&gt;
&lt;p&gt;太坏了，secure boot 没关，没有。上网搜索我的笔记本的 BIOS 设置方法，Redmi Book 14 需要开机后按下 F2 进入 BIOS，然后在启动设置里 &lt;strong&gt;先设置管理员密码&lt;/strong&gt; 之后才能设置是否关闭安全启动。有一点点脱裤子放屁的感觉……算了。总之就是进来了，进到安装引导了。这下真是激动的心，颤抖的手了。&lt;/p&gt;
&lt;p&gt;（由于屏幕反光，就不拍屏了，其实和上次的屏幕一模一样咯）&lt;/p&gt;
&lt;p&gt;这次就得格外小心了：这可不是虚拟机。虽然说搞砸了也能重来（电脑上没什么别的重要文件了，打算全部格式化），但是一想到是实体机，还是有一些些的紧张。&lt;/p&gt;
&lt;p&gt;&lt;del&gt;其实这篇文章是在我进来安装引导之后才开始动笔写的。一开始没打算写来着，不过鉴于好久没有更新博客了，还是水一篇吧（）&lt;/del&gt;&lt;/p&gt;
&lt;h3 id="还是先进行前期验证和网络配置"&gt;还是先进行前期验证和网络配置
&lt;/h3&gt;&lt;p&gt;这次由于有上次安装的记录，所以其实可以直接参考以前写的那个东西。感谢代码高亮，我立马就敲下了 &lt;code&gt;localectl list-keymaps&lt;/code&gt;。然而：没什么卵用。Bro，你就用的是美式键盘呀！？还列出来看个der呀……算了，不管了。不过验证启动模式也许还是有必要的？依旧，&lt;code&gt;cat /sys/firmware/efi/fw_platform_size&lt;/code&gt;，结果是&lt;code&gt;64&lt;/code&gt;。这个应该是说我的启动模式的系统是64位的吧？&lt;/p&gt;
&lt;p&gt;随后是验证网络。这步我其实是有点心虚来着，会不会这个安装引导不支持我的电脑网卡？害怕。但还是先试一试吧。&lt;/p&gt;
&lt;p&gt;从结果来看，我有一个 &lt;code&gt;lo&lt;/code&gt;，&lt;em&gt;virtual loopback interface&lt;/em&gt;，不管；一个 &lt;code&gt;wlan0&lt;/code&gt;，看来是认出我的无线网卡了，好耶。然而它的 &lt;code&gt;state&lt;/code&gt; 是 &lt;strong&gt;DOWN&lt;/strong&gt;，emmm……&lt;/p&gt;
&lt;p&gt;（找找办法……）&lt;/p&gt;
&lt;p&gt;太愚蠢了，&lt;strong&gt;DOWN&lt;/strong&gt;不就是说我没连上网嘛…… 不过根据 ArchWiki，还是先用 &lt;code&gt;rfkill&lt;/code&gt; 命令检查我的无线网卡是不是被 &lt;em&gt;block&lt;/em&gt; 了（屏蔽？也许？），好消息是没有；接着就使用 &lt;code&gt;iwctl&lt;/code&gt; 工具进行联网。这个步骤我感觉有一点点繁琐，先要在交互界面使用 &lt;code&gt;device list&lt;/code&gt; 列出设备，很幸运我这里是直接 &lt;code&gt;wlan0 powered on&lt;/code&gt; 状态，这里的 &lt;code&gt;wlan0&lt;/code&gt; 就是我的设备名了；接着就用 &lt;code&gt;station wlan0 scan&lt;/code&gt; 扫描可用网络，然后用 &lt;code&gt;station wlan0 get-networks&lt;/code&gt; 列出可用网络。这里有个很神奇的点：能连上我的校园网吗？用 &lt;code&gt;station wlan0 connect CSU-WIFI&lt;/code&gt; 试试。这里 &lt;code&gt;CSU-WIFI&lt;/code&gt; 就是我们的校园网了。好消息是成功了，不知道怎么做到的。本身链接我们学校校园网是需要使用一个网页进行验证的，不过也许是因为我在 Windows 系统上刚刚连过一次网络，所以成功重连上了？不清楚，不过也算可喜可贺。最后在用 &lt;code&gt;exit&lt;/code&gt; 退出 &lt;code&gt;iwctl&lt;/code&gt; 的交互界面后再 &lt;code&gt;ip link&lt;/code&gt; 一下检查是否连上：没问题。绿色的 &lt;code&gt;UP&lt;/code&gt; 真好看，诶嘿。&lt;/p&gt;
&lt;p&gt;动态IP应该是自动配置的（ArchWiki讲是 &lt;em&gt;out of box&lt;/em&gt;），所以不管。也许后面我会想搞个静态的？唉，不懂网络真头痛呀。不管不管。直接 &lt;code&gt;ping archlinux.org&lt;/code&gt; 试试。&lt;/p&gt;
&lt;p&gt;烂了，没有数据返回。烂完了。&lt;/p&gt;
&lt;p&gt;（找找办法x2……）&lt;/p&gt;
&lt;p&gt;顺从。又不是没有别的 WIFI 能用。直接连上办公室 WIFI好了。当然，这里也贴一下我参考了的连接校园网的方法的博文：&lt;a class="link" href="https://www.cnblogs.com/holaworld/p/17839616.html" target="_blank" rel="noopener"
&gt;链接1&lt;/a&gt; 以及 &lt;a class="link" href="https://www.bilibili.com/opus/852262124483772422" target="_blank" rel="noopener"
&gt;链接2&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;最后网络这里还有要设置一下系统时间。用 &lt;code&gt;timedatectl&lt;/code&gt; 就可以。 感谢 &lt;code&gt;zsh&lt;/code&gt; 和这些工具带上的自动补全，&lt;code&gt;timedatectl --help&lt;/code&gt; 一下，跟着感觉走，最后就得到了 &lt;code&gt;timedatectl set-timezone Asia/Shanghai&lt;/code&gt; 了。相当简单。&lt;/p&gt;
&lt;h3 id="再见我的旧文件们"&gt;再见，我的（旧）文件们
&lt;/h3&gt;&lt;p&gt;又到了每次装系统最喜欢也最提心吊胆的磁盘分区了。总有一种破后而立的感觉，感觉在磁盘格式化之后，这台电脑就变成全新的了诶。还是一样，&lt;code&gt;fdisk -l&lt;/code&gt; 列一下可用分区。一下出来了一堆呀，删了删了，全部删了。&lt;/p&gt;
&lt;p&gt;又看到一次我的硬盘大小，只有 476.94 GiB，Sad。不过，轻薄本，出差顺带干活用的，无所谓了吧？后面再考虑加容量之类的吧，也许还可以考虑直接换台新本（好奢侈（））。&lt;/p&gt;
&lt;p&gt;开始分区吧，直接 &lt;code&gt;fdisk /dev/nvme0n1&lt;/code&gt; 进入交互模式 （这里我的硬盘只有一个，就是在 &lt;code&gt;fdisk -l&lt;/code&gt; 里列出的 &lt;code&gt;/dev/nvme0n1&lt;/code&gt;，所以就把它传入参数就好）。由于硬盘太小，我也对文件管理没有什么特别多的想法，干脆就是一个 &lt;code&gt;SWAP&lt;/code&gt; 一个 &lt;code&gt;/&lt;/code&gt; 好了。至于分区表，依旧选用 GPT 分区表。貌似 GPT 的功能更加强大？已经完全超越了老旧的 MBR？其实按理来说我应该先多了解一下这些东西再下判断来着，不过这里就还是先相信互联网吧（）&lt;/p&gt;
&lt;p&gt;这里搞了个大乌龙：我不小心把启动盘 &lt;code&gt;/dev/sda&lt;/code&gt; 给分区了。有一说一，挺愚蠢的……目前先这么搞吧，安装引导也没断，后面不碰它应该就没问题，吧？下次还是要注意：根据 ArchWiki 上的指导，实际上应该先将分区表进行备份才对，命令是 &lt;code&gt;sfdisk -d /dev/sda &amp;gt; sda.dump&lt;/code&gt;（这里 &lt;code&gt;/dev/sda&lt;/code&gt; 是要备份分区表的硬盘）。下次一定注意，唉。&lt;/p&gt;
&lt;p&gt;接下来就是使用 &lt;code&gt;mkfs&lt;/code&gt; 等进行文件系统格式化了。这里很多人推荐 &lt;code&gt;Btrfs&lt;/code&gt;，所谓的 &lt;em&gt;B Tree File System&lt;/em&gt;（我一开始以为是 &lt;em&gt;Better File System&lt;/em&gt; 来着），因为它貌似是支持自动压缩和别的一些高级功能，还有快照之类，很方便个人用户使用。这次就不用传统的 &lt;code&gt;ext4&lt;/code&gt; 了，尝尝鲜。使用命令 &lt;code&gt;mkfs.btrfs /dev/nvme0n1p1&lt;/code&gt; 就可以把第一个分区格式化为 Btrfs 格式了。我还留了一个分区作为 Swap 使用，大小设置为了8G。要创建 Swap 分区只需要 &lt;code&gt;mkswap /dev/nvme0n1p2&lt;/code&gt; 即可。&lt;/p&gt;
&lt;p&gt;分好了区，就需要挂载文件系统了。用 &lt;code&gt;mount /dev/nvme0n1p1 /mnt&lt;/code&gt; 就可以。Swap 则使用 &lt;code&gt;swapon /dev/nvme0n1p2&lt;/code&gt; 就行了。这样一来，我们就在硬盘上做好了准备，马上就要把 Arch Linux 安装在这个临时挂载于 &lt;code&gt;/mnt&lt;/code&gt; 的主硬盘了。&lt;/p&gt;
&lt;h2 id="安装冲刺冲刺冲刺"&gt;安装：冲刺！冲刺！冲刺！
&lt;/h2&gt;&lt;p&gt;Arch Linux 的灵魂之一也许就是 &lt;code&gt;pacman&lt;/code&gt; 包管理器了。安装 Arch Linux 实际上也是使用 Pacman 进行的。因此首先就是对 Pacman 进行必要的配置。&lt;/p&gt;
&lt;p&gt;首先还是要选择镜像，可选的镜像站放在了 &lt;code&gt;/etc/pacman.d/mirrorlist&lt;/code&gt; 里。这里直接借鉴上次安装的经验好了，使用 &lt;code&gt;reflector --latest 10 --sort rate&lt;/code&gt; 来排出最快的10个服务器。结果出来之后可以考虑在这条命令的后面加上 &lt;code&gt;--save /etc/pacman.d/mirrorlist&lt;/code&gt; 来保存下来。当然，在这之前（吸取刚刚的教训）我把原文件复制了一份作为备份。&lt;/p&gt;
&lt;p&gt;下来就是安装必要的包，命令为 &lt;code&gt;pacstrap -K /mnt base linux linux-firmware&lt;/code&gt;。这里的 &lt;code&gt;-K&lt;/code&gt; 是指在目标处生成一空的 密钥环。（至于密钥环是什么，对不起，我不知道。后面会学的（））&lt;/p&gt;
&lt;p&gt;经过漫长的等待，我的安装它：报错了。先是安装的特别慢，可能是因为源的问题吧，我还是尝试了 &lt;code&gt;reflector --country China --age 12 --sort rate&lt;/code&gt; 这个命令获取了国内的镜像源；后面是变快了，但是突然又报 &lt;em&gt;error: GPGME error: No data&lt;/em&gt;，不管我怎么操作 &lt;code&gt;pacman&lt;/code&gt;，都没有用。我估计是密钥环之类的东西坏掉了吧，看来是前面对U盘瞎JB分区导致的。这下只能关机拔掉U盘，重新烧录，格式化电脑硬盘然后重新安装。好在这次安装地很快，这个插曲也算是过去了吧。&lt;/p&gt;
&lt;p&gt;现在安装的应该是一些最最基础的软件包。为了安装好后有一些别的功能能用（比如联网），还是需要再安装一些别的软件包。这里我计划是安装 &lt;code&gt;vim&lt;/code&gt; ，&lt;code&gt;dhcpcd&lt;/code&gt; 以及 &lt;code&gt;networkmanager&lt;/code&gt;。不过这些就等到之后 &lt;code&gt;chroot&lt;/code&gt; 后再搞吧。&lt;/p&gt;
&lt;p&gt;(安装中……)&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;em&gt;我们就当这个傻孩子搞了一通之后算是安装好了吧，其实中间应该还有一些插曲，然而他安装好之后真的一路冲刺，就安装完了抱回宿舍继续折腾了。等他再想起来写这个博客的时候已经过了10天了。原谅他吧，好多细节他也记不清了。&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;这下好了，安装成功咧，下面怎么装修好呢？&lt;/p&gt;
&lt;h2 id="装修还是先试试-kde吧顺带处理一下输入法字体网络的坑"&gt;装修：还是先试试 KDE吧，顺带处理一下输入法、字体、网络的坑
&lt;/h2&gt;&lt;p&gt;&lt;em&gt;后面的内容都是这个傻孩子回忆出来的，很多都不对劲了（也许），请谨慎参考&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="不知道先看看-kde-plasma"&gt;不知道，先看看 KDE Plasma
&lt;/h3&gt;&lt;p&gt;直接照搬上次安装的 KDE Plasma 的流程了。安装的东西，设置的玩意儿，几乎一模一样。可能区别是 &lt;code&gt;loacle&lt;/code&gt; 的设置和上次相比更复杂一些？记不太清楚了。主要要处理的问题就是，每次使用 &lt;code&gt;man&lt;/code&gt; 的时候，都会报 &lt;code&gt;locale&lt;/code&gt; 的设置错误问题。解决方法也很简单：照着 ArchWiki 的 Installation Guide 的地区设置那里，再重新搞一次。剩下的什么设置 Taskbar 呀设置 Terminal 什么的，基本都没什么变化。&lt;/p&gt;
&lt;p&gt;KDE Plasma 很不错的一点就是，它几乎就是开箱即用的，除了两个很重要但是没有强制安装的东西：文件管理器和终端模拟器。理论上讲，应该是用同属 KDE 的 &lt;code&gt;Dolphin&lt;/code&gt; 和 &lt;code&gt;Konsole&lt;/code&gt; 的，这样能获得最好的体验（也许），然而在体验过 &lt;code&gt;Konsole&lt;/code&gt; 略显（真的只是略显）老旧的 UI 之后，我还是选择了使用 &lt;code&gt;kitty&lt;/code&gt;。它能原生支持查看图片，算是一个杀手锏级别的功能了吧，其次就是它自带多标签的功能，分栏也很方便，用着挺顺手的。至于文件管理器，目前还没有什么想法，先用着 &lt;code&gt;Dolphin&lt;/code&gt; 好了。&lt;/p&gt;
&lt;h3 id="输入法还是使用小企鹅fcitx5以及中州韵rime"&gt;输入法：还是使用小企鹅（fcitx5）以及中州韵（Rime）
&lt;/h3&gt;&lt;p&gt;其实应该直接说“同上”或者什么的，因为实际上最后的效果和之前在虚拟机上安装的过程是一样的，除了最后我没有导入在 Winodws 上已经配置好的配置文件，仅此而已。然而这个过程还是感觉有一点坑呀，特别是不停地纠结输入法设置到底在哪里之类的问题的时候。实际上，根据 fcitx5 的文档，在使用 Wayland 的时候，直接按照教程设置变量之后重启电脑，就可以在输入法那里看到效果了。（也许不需要重启，只需要登出后重新登录就可以？）&lt;/p&gt;
&lt;p&gt;实际上默认的中州韵已经挺好用了。然而问题是，它的默认输入是中文，然而在 Linux 的命令行里几乎很少用到中文。每次的误输入都能让人燃气无名怒火，解决方案也很简单：把英文输入法放在首选。这里不是说让中州韵的英文成为首选，而是再装一个默认的英文输入法，并且把它放在首位。实际上我在 Winodws 上也是这么设置的。日用挺舒服。&lt;/p&gt;
&lt;h3 id="网络科学上网不容易呀"&gt;网络：科学上网不容易呀
&lt;/h3&gt;&lt;p&gt;在孜孜不倦的努力以及不厌其烦的打扰 AI 下，我成功找到了在我的小破本上科学上网的方法。这里不多讲，但是核心只有一个：使用 TUN 模式。启用 TUN 之后，一切都对了，全对！感谢 AI，感谢 DeepSeek，感谢 ChatGPT！伟大，无需多言。&lt;/p&gt;
&lt;h3 id="字体照着教程开抄"&gt;字体：照着教程开抄
&lt;/h3&gt;&lt;p&gt;之前在虚拟机上进行安装的时候实际上没太注意字体的问题。这次因为是日常自用，还是留意了一下，毕竟每天看着奇形怪状的汉字真的很别扭。字体的设置基本就是参考 &lt;a class="link" href="https://catcat.cc/post/2021-03-07/" target="_blank" rel="noopener"
&gt;这篇博文&lt;/a&gt;，谢谢你，大佬。不过也要注意，读的时候（或者，抄的时候）还是要仔细一些，有一些设置实际上不是最好的设置，可以用出现在底下的更好的配置替代。也算是挡住了一些些伸手党？也许？&lt;/p&gt;
&lt;h3 id="指纹呜呜呜呜呜怎么硬件还能不开源呀"&gt;指纹：呜呜呜呜呜怎么硬件还能不开源呀
&lt;/h3&gt;&lt;p&gt;我的笔记本最让我自豪的一点就是她有非常好用的指纹识别。这个本来应该没什么要紧的，但是想到之后就很像折腾一下。特别是回回输入密码，真的有点累。虽然这个本是我自己用，里面也没啥东西，但是还是不太想无密码裸奔。而如果有了指纹，一切都变得熟悉了。啊，那该是多么美妙呀。&lt;/p&gt;
&lt;p&gt;直到我花了两个小时多把指纹识别都配置的差不多了的时候，我才发现，愚蠢的小米旗下的 Redmi Book 14 使用的指纹识别模块是闭源的，也没有相关的逆向工程尝试，现在没有任何驱动能启用它。&lt;/p&gt;
&lt;p&gt;泪就这样拉了出来。特别是愚蠢的 Firefox 还始终坚持认为我的笔记本是带了可用的指纹识别的，想生成个 Github 的 token 都不行，非得要我按指纹。我按个大头鬼。&lt;/p&gt;
&lt;p&gt;唉。&lt;/p&gt;
&lt;h2 id="收尾又是一篇流水账但是还是做一些总结"&gt;收尾：又是一篇流水账，但是还是做一些总结
&lt;/h2&gt;&lt;p&gt;感觉这篇没写什么正经东西，又是纯粹地做了一些记录，然后就是磨磨叽叽自说自话了。鉴于此，我决定总结一下一路遇到的主要的坑在哪里，以及安装的大致流程，做一个 quick reference。&lt;/p&gt;
&lt;h3 id="quick-reference-installation"&gt;Quick Reference: Installation
&lt;/h3&gt;&lt;p&gt;以下是从最初的准备工作到得到可用系统的过程：&lt;/p&gt;
&lt;ol start="0"&gt;
&lt;li&gt;准备启动盘，备份，barabara&lt;/li&gt;
&lt;li&gt;加载系统，从启动盘启动，进入 shell，执行基本检查（系统架构，键盘设置，网络验证，时区设置……）&lt;/li&gt;
&lt;li&gt;磁盘分区（重要）并进行格式化，挂载文件系统&lt;/li&gt;
&lt;li&gt;检测 &lt;code&gt;pacman&lt;/code&gt; 镜像速度并选择，安装必要包（base, linux, linux-firmware）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;chroot&lt;/code&gt; 进挂载的文件系统，安装必要工具（网络管理，文本编辑器，pager，man-page）&lt;/li&gt;
&lt;li&gt;设置 bootloader（重要且坑），需要仔细阅读文档&lt;/li&gt;
&lt;li&gt;尝试重启并用 bootloader 启动，进入 &lt;code&gt;tty1&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="quick-reference-customization"&gt;Quick Reference: Customization
&lt;/h3&gt;&lt;p&gt;以下是得到我目前使用的环境的部分配置过程：&lt;/p&gt;
&lt;ol start="0"&gt;
&lt;li&gt;安装好，保证能正确启动 Arch Linux&lt;/li&gt;
&lt;li&gt;用 &lt;code&gt;nmcli con up&lt;/code&gt; 启动网络（后面发现可以用 &lt;code&gt;nmtui&lt;/code&gt;），保证网络畅通&lt;/li&gt;
&lt;li&gt;添加 &lt;code&gt;archlinuxcn&lt;/code&gt; 源&lt;/li&gt;
&lt;li&gt;执行更新，安装软件包。我安装了 &lt;code&gt;vi&lt;/code&gt;, &lt;code&gt;sudo&lt;/code&gt;, &lt;code&gt;git&lt;/code&gt;, &lt;code&gt;eza&lt;/code&gt;, &lt;code&gt;zsh&lt;/code&gt;, &lt;code&gt;nvim&lt;/code&gt;, &lt;code&gt;kitty&lt;/code&gt;, &lt;code&gt;firefox&lt;/code&gt; 等基础工具&lt;/li&gt;
&lt;li&gt;安装 &lt;code&gt;oh-my-zsh&lt;/code&gt; 与 &lt;code&gt;oh-my-posh&lt;/code&gt;，导入已有配置，添加常用别名如 &lt;code&gt;l&lt;/code&gt;, &lt;code&gt;la&lt;/code&gt;, &lt;code&gt;l.&lt;/code&gt;, &lt;code&gt;ls.&lt;/code&gt; 等&lt;/li&gt;
&lt;li&gt;安装窗口管理器，这里一开始使用 &lt;code&gt;KDE plasma&lt;/code&gt; 作为 “起码能用” 的桌面环境，以及套件 &lt;code&gt;dolphin&lt;/code&gt; 作文文件管理器&lt;/li&gt;
&lt;li&gt;安装中文输入法 &lt;code&gt;fcitx5-im&lt;/code&gt; 以及 &lt;code&gt;fcitx5-rime&lt;/code&gt;，进行必要配置（XDG 配置等）&lt;/li&gt;
&lt;li&gt;更改 &lt;code&gt;localectl&lt;/code&gt; 以便正常使用 &lt;code&gt;man&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;安装 &lt;code&gt;yay&lt;/code&gt; 以及尝试科学上网&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="遇到的坑"&gt;遇到的坑：
&lt;/h3&gt;&lt;p&gt;下面是花费时间比较多的部分，这里列举一下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;分盘搞错盘了，本来内存是 nvme 结果分到 sda 了；&lt;/li&gt;
&lt;li&gt;分盘的时候没想清楚到底该怎么分，瞎分最后还得重来&lt;/li&gt;
&lt;li&gt;没有检查镜像速度导致龟速下载（唉，Arch Linux，必须依赖网络，可惜）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;umount&lt;/code&gt; 的时候没有 &lt;code&gt;umount&lt;/code&gt; 干净导致烂掉&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mount&lt;/code&gt; 的时候没有检查是否正确 &lt;code&gt;mount&lt;/code&gt; 到挂载点&lt;/li&gt;
&lt;li&gt;忘记安装网络管理器，编辑器等等&lt;/li&gt;
&lt;li&gt;没有正确设置 &lt;code&gt;bootloader&lt;/code&gt; (一定要读完 &lt;code&gt;bootloader&lt;/code&gt; 的 &lt;code&gt;ArchWiki&lt;/code&gt; 词条！)&lt;/li&gt;
&lt;li&gt;没有搞好 &lt;code&gt;localectl&lt;/code&gt; 和 &lt;code&gt;local&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;安装 &lt;code&gt;fcitx5&lt;/code&gt; 之后不重启（记得感觉配好之后就重启试试）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;希望这些总结的东西会帮到你吧，让这篇文章不是那么水。&lt;/p&gt;
&lt;h2 id="后记我一定是对-linux-有什么奇怪的幻想"&gt;后记：我一定是对 Linux 有什么奇怪的幻想
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;亲爱的 Arch Linux 笔记本：&lt;/p&gt;
&lt;p style="text-indent: 50px"&gt; 终于，BTW, I USE ARCH!!! 谢谢你和我走过的一路。自从安装了 Arch Linux，你真的跑的飞快。我还没有回过神来，你就已经启动了。KISS 的原则，pacman 与 AUR 达成的简洁与丰富的平衡，滚动发行带来的刺激，这一切都太令人兴奋了。先进的 Arch Linux 已经完全地超越了老旧的 Windows！ &lt;/p&gt;
&lt;p style="text-indent: 50px"&gt; 然而，也许我还是对你有太多的误会。装上 Arch Linux 的你没有变得更加省电，反而似乎更加费电了？我希望这是我没有搞好电池方案配置的锅，但是为什么你不能帮我搞好呢？我懂，我们 Linux 是讲究过生日先从办养鸡场和农场开始的，但是为什么呢？还有，为什么搞不定闭源驱动呢？不能上兼容层吗？说起来就气，怎么你的配置文件还是能变得和 Windows 一样杂乱不堪？怎么软件包随处大小便的时候你还是不管管？道理我都懂，但是系统管理员也不能每天都被埋在这些东西里面吧？还有呀……&lt;/p&gt;
&lt;p align="middle"&gt; -- 此处省略牢骚 2000 字 -- &lt;/p&gt;
&lt;p style="text-indent: 50px"&gt; 但是，你懂的，你可是 Linux，对吧？你已经是一个成熟的操作系统了，应该学会自己面对这些问题了，对吧？
&lt;p align="right"&gt;Yours, &lt;/p&gt;
&lt;p align="right"&gt;A Moment&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;谢谢你能看到这里。看完这一大堆废话，说实话也挺累的。如果这些整活儿的内容让你能开心一下，那就太好了。最后，一如既往，就祝您身心健康吧。&lt;/p&gt;</description></item><item><title>First Blog: 搭建这个博客</title><link>https://a-moment096.github.io/p/first-blog-%E6%90%AD%E5%BB%BA%E8%BF%99%E4%B8%AA%E5%8D%9A%E5%AE%A2/</link><pubDate>Fri, 01 Nov 2024 00:00:00 +0800</pubDate><guid>https://a-moment096.github.io/p/first-blog-%E6%90%AD%E5%BB%BA%E8%BF%99%E4%B8%AA%E5%8D%9A%E5%AE%A2/</guid><description>&lt;img src="https://a-moment096.github.io/p/first-blog-%E6%90%AD%E5%BB%BA%E8%BF%99%E4%B8%AA%E5%8D%9A%E5%AE%A2/Reimu.png" alt="Featured image of post First Blog: 搭建这个博客" /&gt;&lt;p&gt;简单记录一下自己搭建博客的经历。&lt;/p&gt;
&lt;h2 id="begin-好想搭博客"&gt;Begin: 好想搭博客
&lt;/h2&gt;&lt;p&gt;网上高强度冲浪的过程中，发现很多人都有自己的博客，特别是在读过几篇博文之后，对会搭建博客的大佬的艳羡之情愈发激烈，同时也很想在网上
搭一个自己的小窝，记录一下自己的学习和生活（以便于跻身大佬的行列（在心理上））。 于是，在若干的纠结与选择之后，决定尝试用 Hexo + GitHub pages 的方式
搭建一个自己的博客。&lt;/p&gt;
&lt;h2 id="try初试-hexo"&gt;Try：初试 Hexo
&lt;/h2&gt;&lt;p&gt;其实在10月份左右的时候，我就已经尝试开始搭建博客了。但是网上教程纷繁复杂，Hexo的文档貌似也很久没有更新了，在写完 About 之后
便陷入了各种方面的自定义，然后失败循环，结果便是迟迟没有推进博客搭建。期间找到过一个很喜欢的主题，结果因为中英文混排导致字符间距过大的问题，
一怒之下怒删文件。结果便是把搭建博客的计划一拖再拖。（其实还是没有找到合适的喜欢的主题:P ）&lt;/p&gt;
&lt;p&gt;不过10月份失败的经历也算是一点点积累，给了我一点关于 YAML 和 TOML 的知识储备，以及让我（也许）学会了如何高效地搜索教程。不算太亏。&lt;/p&gt;
&lt;h2 id="again再试-hexo"&gt;Again：再试 Hexo
&lt;/h2&gt;&lt;p&gt;转眼到了10月底，准确来讲就是昨天，10月31日。心血来潮的我再次向Hexo博客发起冲击。然而拦住我的不只是又没有找到好看的主题（这次是按照Github
的Star数选的，也许是我审美太小众？），还有烦人的网络问题。一会儿是用 &lt;code&gt;npm&lt;/code&gt; 拉取不到内容，一会儿又是 &lt;code&gt;git&lt;/code&gt; 连接不到仓库。虽然后面网上搜索到
是我科学上网姿势不对，需要跑全局，并且 &lt;code&gt;npm&lt;/code&gt; 换成淘宝源(&lt;a class="link" href="https://npmmirror.com/" target="_blank" rel="noopener"
&gt;https://npmmirror.com/&lt;/a&gt;)就可以轻松解决，然而接连的 Error 还是耗尽了我的耐心。&lt;/p&gt;
&lt;p&gt;对吗？真的要搭博客吗？师兄这晚告诉我，可以考虑搞个微信公众号，要吗？&lt;/p&gt;
&lt;h2 id="-受不了hugo吧"&gt;?: 受不了，Hugo吧
&lt;/h2&gt;&lt;p&gt;还是不想搞公众号，感觉太公众了。虽然也有博客的功能，但是我的主题这块儿谁来给我补呀（？）。是时，我又想起昨晚网上冲浪时发现的另一个构建框架：
&lt;em&gt;Hugo&lt;/em&gt;。于是当机立断，立刻冲向 Github 看看有什么好的主题，最后便相中了这款 &lt;strong&gt;stack&lt;/strong&gt;。简约界面深得我意的同时，又满足了我对页面版式的需求（好怪哦）。
最重要的时，这个主题的模板目录结构很清晰！我也是摸索着添加了几个icon后配置出了令我满意的结果。感谢你，&lt;a class="link" href="https://jimmycai.com/" target="_blank" rel="noopener"
&gt;Jimmy Cai&lt;/a&gt;!&lt;/p&gt;
&lt;h2 id="end-好耶"&gt;End: 好耶
&lt;/h2&gt;&lt;p&gt;第一次搭建博客，踩的坑自己觉得不算少。不过大部分的坑都是因为不熟悉前端造成的。啊，要是我是一个搞计科软工前端XXX的学生那该多好啊，可惜，改不得。
而且另一个角度来讲，踩坑也是一种学习过程嘛。日后也许会往博客上加点新的玩意儿，搞得更花哨一些~&lt;/p&gt;
&lt;p&gt;还有一件事让我背后直冒冷汗，在部署页面的时候犯蠢把github上的所有我自己的改动全给删了，差点以为全都找不回来了……好在 GitHub Desktop 在
Discard Stash 的时候是把改动文件全都删除到回收站，这才找回来这些配置。Git 操作还是要小心呀。&lt;/p&gt;
&lt;p&gt;也许会有人问我为什么花了大把时间在纠结主题上，说博客最重要的是内容。我也很同意内容为王的观点，但是用着不满意的主题，总感觉写起来不得劲儿。
我比较相信 “工欲善其事，必先利其器”，反正是第一次搭博客，对主题的试错成本几乎是无限低 (不需要考虑迁移问题)，那么为何不多尝试不同的主题，
一次配好一劳永逸呢？&lt;/p&gt;
&lt;p&gt;So, that&amp;rsquo;s it. Thanks for reading~!&lt;/p&gt;</description></item></channel></rss>