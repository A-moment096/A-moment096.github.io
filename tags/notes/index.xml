<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Notes on A Moment's Rest</title><link>https://a-moment096.github.io/tags/notes/</link><description>Recent content in Notes on A Moment's Rest</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Tue, 29 Jul 2025 10:00:11 +0000</lastBuildDate><atom:link href="https://a-moment096.github.io/tags/notes/index.xml" rel="self" type="application/rss+xml"/><item><title>（也许是）一个 Git 教程？其一</title><link>https://a-moment096.github.io/p/%E4%B9%9F%E8%AE%B8%E6%98%AF%E4%B8%80%E4%B8%AA-git-%E6%95%99%E7%A8%8B%E5%85%B6%E4%B8%80/</link><pubDate>Mon, 28 Jul 2025 22:49:16 +0800</pubDate><guid>https://a-moment096.github.io/p/%E4%B9%9F%E8%AE%B8%E6%98%AF%E4%B8%80%E4%B8%AA-git-%E6%95%99%E7%A8%8B%E5%85%B6%E4%B8%80/</guid><description>&lt;img src="https://a-moment096.github.io/posts/Shell_Note/Git_How/Tatara%20Kogasa.jpg" alt="Featured image of post （也许是）一个 Git 教程？其一" />&lt;p>&lt;em>Git 真的很好用，但是 Git 的命令真的好复杂。简单整理一下，就当写个教程好了~&lt;/em>&lt;/p>
&lt;p>&lt;em>头图出自 &lt;a class="link" href="https://www.pixiv.net/en/users/75383094" target="_blank" rel="noopener"
>夏空&lt;/a> 太太所画的 &lt;a class="link" href="https://www.pixiv.net/en/artworks/116876998" target="_blank" rel="noopener"
>多多良 小伞&lt;/a>，可爱捏~ 那就来一曲小伞的个人曲吧&lt;/em>&lt;/p>
&lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css">
&lt;style type="text/css">.dark-theme .aplayer{background:#212121}.dark-theme .aplayer.aplayer-withlist .aplayer-info{border-bottom-color:#5c5c5c}.dark-theme .aplayer.aplayer-fixed .aplayer-list{border-color:#5c5c5c}.dark-theme .aplayer .aplayer-body{background-color:#212121}.dark-theme .aplayer .aplayer-info{border-top-color:#212121}.dark-theme .aplayer .aplayer-info .aplayer-music .aplayer-title{color:#fff}.dark-theme .aplayer .aplayer-info .aplayer-music .aplayer-author{color:#fff}.dark-theme .aplayer .aplayer-info .aplayer-controller .aplayer-time{color:#eee}.dark-theme .aplayer .aplayer-info .aplayer-controller .aplayer-time .aplayer-icon path{fill:#eee}.dark-theme .aplayer .aplayer-list{background-color:#212121}.dark-theme .aplayer .aplayer-list::-webkit-scrollbar-thumb{background-color:#999}.dark-theme .aplayer .aplayer-list::-webkit-scrollbar-thumb:hover{background-color:#bbb}.dark-theme .aplayer .aplayer-list li{color:#fff;border-top-color:#666}.dark-theme .aplayer .aplayer-list li:hover{background:#4e4e4e}.dark-theme .aplayer .aplayer-list li.aplayer-list-light{background:#6c6c6c}.dark-theme .aplayer .aplayer-list li .aplayer-list-index{color:#ddd}.dark-theme .aplayer .aplayer-list li .aplayer-list-author{color:#ddd}.dark-theme .aplayer .aplayer-lrc{text-shadow:-1px -1px 0 #666}.dark-theme .aplayer .aplayer-lrc:before{background:-moz-linear-gradient(top, #212121 0%, rgba(33,33,33,0) 100%);background:-webkit-linear-gradient(top, #212121 0%, rgba(33,33,33,0) 100%);background:linear-gradient(to bottom, #212121 0%, rgba(33,33,33,0) 100%);filter:progid:DXImageTransform.Microsoft.gradient( startColorstr='#212121', endColorstr='#00212121',GradientType=0 )}.dark-theme .aplayer .aplayer-lrc:after{background:-moz-linear-gradient(top, rgba(33,33,33,0) 0%, rgba(33,33,33,0.8) 100%);background:-webkit-linear-gradient(top, rgba(33,33,33,0) 0%, rgba(33,33,33,0.8) 100%);background:linear-gradient(to bottom, rgba(33,33,33,0) 0%, rgba(33,33,33,0.8) 100%);filter:progid:DXImageTransform.Microsoft.gradient( startColorstr='#00212121', endColorstr='#cc212121',GradientType=0 )}.dark-theme .aplayer .aplayer-lrc p{color:#fff}.dark-theme .aplayer .aplayer-miniswitcher{background:#484848}.dark-theme .aplayer .aplayer-miniswitcher .aplayer-icon path{fill:#eee}&lt;/style>
&lt;script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js">&lt;/script>
&lt;script src="https://cdn.jsdelivr.net/npm/meting@2.0.1/dist/Meting.min.js">&lt;/script>&lt;meting-js auto="https://music.163.com/#/song?id=22636608" theme="#2980b9" loop="never">&lt;/meting-js>
&lt;h2 id="git熟悉又陌生的名字-">Git，熟悉又陌生的名字 ……
&lt;/h2>&lt;p>也许是所处环境的原因，我身边有很多人不知道 Git 是什么。他们都听过 &lt;em>Github&lt;/em>，但很多却只知道上面有好多程序和程序员。虽然也没错，但是并不准确；而当我说我在用 &lt;em>Git&lt;/em> 的时候，会有人把 &lt;em>Git&lt;/em> 和 &lt;em>Github&lt;/em> 混为一谈；很多人觉得 Git 很复杂，顺带觉得 Github 也很复杂…… 为此，我想分享一下我对 Git 和 Github 的理解，聊聊 Git 和 Github 都是什么。&lt;/p>
&lt;p>所以，如果你不了解 Git 是什么，那我很荣幸能在这里向你简单介绍它。&lt;/p>
&lt;h3 id="所以到底什么是-git版本控制啊">所以到底什么是 Git？版本控制？啊？
&lt;/h3>&lt;p>所谓的 Git，它就是：&lt;/p>
&lt;p>&lt;strong>&lt;center>一款为程序开发的存档系统。&lt;/center>&lt;/strong>&lt;/p>
&lt;p>是的，事实就是这样。游戏存档。卡关的时候/做支线的时候/后悔的时候可以进度回溯的游戏存档。如果你在翻阅 &lt;em>ProGit&lt;/em> 或者某些教程时不太明白什么是 &lt;em>版本控制系统&lt;/em>，没关系，就是游戏存档（程序用）的比较花哨的名字。&lt;/p>
&lt;p>不过，为了能高效地，更好地服务程序员，Git 自然有了一大票复杂的功能，且每个子功能还会做特别多的细分，另外对每个存档都可以有非常复杂 &lt;del>（麻烦）&lt;/del> 的，细致 &lt;del>（啰嗦）&lt;/del> 的控制。然而，这依旧不能让它摆脱它就是个存档系统的事实。&lt;/p>
&lt;p>一旦你接受了这个设定，那么 Git 就其实没有多少秘密了。&lt;/p>
&lt;h3 id="ok但是听你说好像很麻烦">OK，但是听你说好像很麻烦……
&lt;/h3>&lt;p>不得不承认的是，正如上面所说的那样，Git 的命令实际上可以非常地复杂。如果你愿意翻阅它的 man-page，你会发现内容出奇地长；而当你尝试用 &lt;code>git --help&lt;/code> 来获取一些简单有效的信息的时候，很抱歉，&lt;code>git --help&lt;/code> 只会告诉你你能怎么做，并伴随着看不太懂的 usage，却不太会告诉你怎么做能做什么。&lt;/p>
&lt;p>然而，转折来了。首先，如果你受环境所限，只能从命令行操作 Git，待会儿介绍的四五个命令几乎就能覆盖 80% 的使用场景了。而如果你的环境支持你使用图形化的界面，那么如果不是命令行的忠实用户，完全可以挑个 GUI 程序，比如和 Github 集成度高的 &lt;em>Github Desktop&lt;/em>，界面美观现代，功能也已经足够丰富，没必要和自己过不去。&lt;/p>
&lt;p>所以，结论是：Git 很复杂，但是我们可以用的很简单呀。它很强大，很好，但这不影响我只需要那几个最基础的功能。最重要的是，当你需要更复杂的功能的时候，互联网永远是你的好朋友。你完全可以现场上网搜索，大概率会有来自 StackOverflow 的朋友向你答疑解惑（贴答案）（好几年前且点赞特别高的）。&lt;/p>
&lt;p>So, don&amp;rsquo;t be afraid! Just try it!&lt;/p>
&lt;h3 id="行但是-git-和-github-到底是什么关系">行，但是 Git 和 Github 到底是什么关系？
&lt;/h3>&lt;p>这算是很常见的问题了。解释起来也很简单：Github 能提供云存档功能。就像 Steam 有游戏云存档一样，Git 也可以有个云存档。只不过，Steam 有个专门的服务器来帮你自动地存好你的游戏内容，而 Git 则可以允许你选择你喜欢的地方存你的代码存档。&lt;/p>
&lt;p>而 Github，正是那个大部分程序员都喜欢的选择。不仅如此，Github 上传的存档还兼具展示功能，大家可以在 Github 上给自己喜欢的代码存档投票，也可以把别人的存档下载到自己电脑上，甚至可以尝试和别人一起组排。所以，说是交友网站，也未尝不可（也许）&lt;/p>
&lt;p>那么我可以选择别的地方存放存档吗？当然可以！除了 Github，还有很多很多的 Git 服务提供商。你还可以 &lt;em>自建 Git 服务&lt;/em>！甚至，Github 显得有些 “&lt;em>违背&lt;/em>” Git 的初衷：分布式的存档存储。什么意思呢？Git 一开始是打算，让所有的代码开发者（玩家）都留一份存档，然后大家就可以一起攻略组排了。大家都保留一份源码，这不就相当于大家都做存储功能了吗？只不过随着合作要求的提高和开源社区的扩大，Github 这样一个公开自己代码的地方就这么自发地出现了。&lt;/p>
&lt;p>总而言之，Git 是存档工具，Github 是大家上传/分享/讨论/合作云存档的地方。&lt;/p>
&lt;h3 id="好耶我逐渐理解一切">好耶，我逐渐理解一切！
&lt;/h3>&lt;p>是这样的，Git 就是做这么个事儿。也许你会看到一些介绍一开始会提 Git 使用的技术多么先进，多么高效，多么体现开源精神，然后不明所以。然而 Git 就是做这么个代码存档的东西，为了使用它以期了解它的话，大框架就是这样的。&lt;/p>
&lt;p>然而这里还是要提个醒：上面也许的确抓住了 Git 的核心目的，但是依旧是很粗糙的，非常概括性的。上面的文字只能帮助 &lt;em>了解 Git 是什么&lt;/em>，并不能告诉你 &lt;em>Git 怎么做的&lt;/em>。另外，使用 Git 的命令完成最基础的工作是很简单，但是在切实明白一条命令到底在做什么前，&lt;strong>请最好不要盲目运行这条命令&lt;/strong>。实际上，要想运用好 Git 管理你的代码/项目，还是需要了解一些关于 Git 究竟在背后怎么做的知识的。&lt;/p>
&lt;p>所以，如果你还对 Git 感兴趣，或者想把 Git 用起来的话，我们就来讲一些技术细节吧~&lt;/p>
&lt;h2 id="要怎么用-git-存档">要怎么用 Git 存档？
&lt;/h2>&lt;p>想解答这个问题，我们不可避免地要接触一些没啥意思的概念。与其直接介绍它们，我们先来看看，日常开发会怎么使用 Git 吧。&lt;/p>
&lt;h3 id="tig-的一天">Tig 的一天
&lt;/h3>&lt;p>Tig 是热爱 Minecraft 的忠实玩家。他很享受创造神的感觉，毕竟他就是被游戏名吸引而来的。今天他计划开展一个新的工作：制作一个百万刷铁机！&lt;/p>
&lt;p>Oh no! Tig 的 Minecraft 除了点奇怪的问题！他被告知，Minecraft 的图形界面已经坏了，取而代之的，他可以用代码来操控角色并任意创造游戏中的物品，且他只能用 &lt;code>git&lt;/code> 来做存档（究竟是谁干的，真坏呀）。Tig 感到心里五味杂陈：这还是 Minecraft 吗？然而他心中有一个信念：我一定要做好这个刷铁机，即便我能直接虚空点出来铁块！等游戏恢复的时候，就可以在这台刷铁机的基础上继续快乐玩耍啦！&lt;/p>
&lt;p>于是，Tig 用 &lt;code>git init&lt;/code> 创建了一个空世界的存档。然后就开始在存档里用代码一行行写他在这个世界里要做些什么……&lt;/p>
&lt;p>过了一会儿，Tig 妈妈喊他要他吃午饭了。虽然不愿意，Tig 还是要先放下手上的工作。他打算先暂时保存一下，于是使用 &lt;code>git add .&lt;/code> 来保存好自己手上的所有写好的代码。毕竟，他也不知道是不是有的地方有点问题，带会儿还要调一下，他现在也是被拉过去吃饭的。&lt;/p>
&lt;p>吃完饭后还睡了个午觉，Tig 回来又写了一会儿。他对自己的成果很满意，因为他已经想办法把村里的刁民挪到了高空中了。这实在是不太容易，他不希望待会儿犯蠢丢掉这几个村民。于是他决定要存档。他先用 &lt;code>git add .&lt;/code> 来保存所有文件的所有改动，然后用 &lt;code>git status&lt;/code> 查看了改动的文件们。感觉没什么问题，他使用 &lt;code>git commit&lt;/code> 来正式保存了这个存档。存档系统问他要他给自己的改动写个简述，他写了 &lt;code>村民挪好了，准备搭框架&lt;/code>。&lt;/p>
&lt;p>过了一个下午和一个晚上，Tig 终于在睡觉前把刷铁机搞好了！实在是一个无比伟大的创举，Tig 忍不住把它分享出去，也方便自己在其他电脑上继续工作。他创建了 Github 账号和一个仓库，并且用 &lt;code>git push&lt;/code> 把这个存档放在了它的仓库里。然而睡前他还是想先在另一台电脑上先把存档下下来，于是使用 &lt;code>git clone &amp;lt;git-link&amp;gt;&lt;/code> 来把仓库克隆到本地。&lt;/p>
&lt;p>晚上躺在床上，他一想到以后就可以把存档用 &lt;code>git push&lt;/code> 方便地推送到 Github 上，并且用 &lt;code>git pull&lt;/code> 在另一台电脑上来获取最新的改动了，他就不自觉地笑出声，心里盘算着怎么在明天做一些改善，给刷铁机套个好看的壳子之类的……&lt;/p>
&lt;p>可喜可贺，可喜可贺！~&lt;/p>
&lt;h3 id="所以他都干了些啥">所以，他都干了些啥？
&lt;/h3>&lt;p>Tig 的故事貌似有点无聊，毕竟，给 Git 硬套个背景，貌似有点牵强；更重要的是，谁家好人这么玩 Minecraft 呀！然而他用到的命令，几乎就是我平时常用的所有命令了。我们来总结一下吧。我们就不再多提游戏的事，毕竟好像都戳穿了是在写代码……&lt;/p>
&lt;ul>
&lt;li>&lt;code>git init&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>我们可以用 &lt;code>git init&lt;/code> 来在本地创建/初始化一个 Git 仓库。这代表着，你打算用 Git 来管理这个文件夹了。很简单的命令，其实频率也很低，因为你很少反复初始化一个仓库。&lt;/p>
&lt;ul>
&lt;li>&lt;code>git add .&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>一个频率还挺高的命令。你在仓库内的修改，Git 都不会立马记录下来。他怕他立马记下来之后，随后用户又马上反悔。另外，这样立马就记录下来，反而和单纯的文件保存功能有所重叠了。&lt;/p>
&lt;p>所以，当你觉得目前的进展还不错，你就可以用这个命令来 &lt;em>暂存&lt;/em> 当前的所有修改。这里的 “暂存” 有两个意思：一是 Git 确实是把你的修改保存到了 &lt;em>暂存区&lt;/em> 里，另一个则是你要是现在发现有个修改不太对，可以很方便的从暂存区里撤下来。&lt;/p>
&lt;p>&lt;code>git add .&lt;/code> 里的这个 &lt;code>.&lt;/code> 就是当前目录的意思，也就是说这个目录下的所有文件我都要暂存起来。Git 会很聪明地只保存修改，这也是设计之初就确定的。如果你只想保存一部分，那就写他们的名字吧，或者写对应的目录，都可以，能定位到就好。&lt;/p>
&lt;p>不过，总之，这个命令就是让你暂存当前所有修改的。&lt;/p>
&lt;ul>
&lt;li>&lt;code>git status&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>一个我很爱用的命令。可以向你报告当前暂存区的情况以及工作目录的情况。比如什么文件被修改了，哪些文件是新加的，谁被删除了，而这些改动里谁被暂存下来，又有哪些你没暂存下来。&lt;/p>
&lt;p>如果你的 Git 是默认配置，他还会提醒你可以怎么撤回某些修改。跟着做就好了。&lt;/p>
&lt;ul>
&lt;li>&lt;code>git commit&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>当你对你的进度感到满意时，你就可以用 &lt;code>git commit&lt;/code> 来提交你暂存区的东西了。所谓的提交，就是形成一个存档，你后续可以回来的一个存档。这个存档里你的仓库的模样会被冻结下来，当你回到这个提交时，一切都会回到当初的模样。非常的美好。&lt;/p>
&lt;p>要注意的有两点，一是 &lt;code>git commit&lt;/code> 只提交 &lt;strong>暂存区&lt;/strong> 的内容。没被暂存的，还会在原地等待你先用 &lt;code>git add&lt;/code> 暂存起来，或者等你撤回那些修改。二是，&lt;code>git commit&lt;/code> 会要求你给这个提交留个注释。请不要省事瞎写个什么东西，因为未来的你可能会对瞎写注释的现在的你感到伤心。默认情况下，&lt;code>git commit&lt;/code> 会打开你的文本编辑器然后让你开写，而如果你觉得很麻烦不想开编辑器，可以用 &lt;code>git commit -m &amp;quot;messages&amp;quot;&lt;/code> 来把这行 &lt;code>messages&lt;/code> 作为提交注释。&lt;/p>
&lt;p>可以再补充两点：如果你提交过后发现因为小失误忘记暂存某些内容或者有些小改动的话，你可以在把改动加入暂存区后补充到这次提交里，用法则是 &lt;code>git commit --amend&lt;/code>。另外，提交要慎重，因为提交过的内容就不是那么好修改了。你当然能改，但是相比 &lt;code>git add&lt;/code> 到暂存区的内容而言，实在是要麻烦一些。&lt;/p>
&lt;ul>
&lt;li>&lt;code>git push&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>把你当前的内容推送到远程仓库里。如果你的仓库是用 &lt;code>git clone&lt;/code> 获得的且你拥有这个仓库的修改权限，那么 &lt;code>git push&lt;/code> 就可以简单直接地把 &lt;em>这条分支&lt;/em> 的修改推送到远程。&lt;/p>
&lt;p>我们这里还是先不讲什么分支，也先不谈远程协作之类的东西。不过就常用命令介绍来说，&lt;code>git push&lt;/code> 算是比较常用且同样很简单的一个命令了。&lt;/p>
&lt;ul>
&lt;li>&lt;code>git clone&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>把 git 仓库从远程下载到本地。后面跟上仓库的链接就好。如果你是从 Github 来克隆到本地的话，点绿色按钮的 Clone 就会看到你可以怎么做。你可以直接复制里面的命令然后执行。&lt;/p>
&lt;ul>
&lt;li>&lt;code>git pull&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>把远程仓库的内容拉取到本地。和 &lt;code>push&lt;/code> 的方向是近乎相反的。如果远程有个修改，你希望同步到本地，那就 &lt;code>git pull&lt;/code> 一下吧。&lt;/p>
&lt;p>这个命令要注意的点是，不要在本地有修改没存的情况下执行 &lt;code>git pull&lt;/code>。如果本地和远程起了冲突，会很麻烦。避免麻烦的最好方式是，先 &lt;code>git pull&lt;/code> 之后再做自己的修改。&lt;/p>
&lt;h3 id="画个流程图">画个流程图
&lt;/h3>&lt;figure class="mermaid-container">
&lt;div class="mermaid">flowchart LR
A[开始] --> B[git init\n创建新仓库]
A --> C[git clone\n克隆已有仓库]
B --> D[在仓库中做出变更]
C --> D
D -- 暂时存下 --> E[git add .\n暂存已有变更]
E -- 满意已暂存内容 --> F[git commit\n提交所有暂存的变更]
F --> G[git push\n上传至远程仓库]
G --> H[其他设备: git pull\n从远程获取最新变更]
H --> D
F --> D
&lt;/div>
&lt;figcaption>Git 日常工作流&lt;/figcaption>
&lt;/figure>&lt;h2 id="好累先聊到这里吧">好累，先聊到这里吧
&lt;/h2>&lt;p>我们已经介绍了 Git 是什么以及日常会用到的功能。我可以说，除了剩下关于 Git 另一个非常强大的功能：分支的两三个命令，以及一两个我觉得好用的命令以外，剩下的命令都是我很不常用的命令了。剩下的命令几乎只有在我搞砸了什么东西的时候临时从网上搜来救火用的，而保持良好的使用习惯的话真的是很少用到这些麻烦/复杂/难以理解的功能的。&lt;/p>
&lt;p>所以，如果你看到了这里，恭喜你已经掌握了 Git 单分支的工作流程了。就是改文件，暂存，提交，推送。而下一章我们会看看 Git 被吹的神乎其神的分支到底是个啥。&lt;/p>
&lt;p>这里要特别声明的是，这篇文章的比喻借鉴了 &lt;a class="link" href="https://space.bilibili.com/337242418" target="_blank" rel="noopener"
>HDAlex_John&lt;/a> 的 Git 教程系列：&lt;a class="link" href="https://www.bilibili.com/video/BV1Hkr7YYEh8" target="_blank" rel="noopener"
>给傻子的 Git 教程&lt;/a>，讲的相当好。好在我不是傻子，看着也不累，哈哈哈哈。（还是自己写起来比较累）&lt;/p>
&lt;p>那么最后，感谢你看到这里，祝你心情愉悦，生活顺遂！~&lt;/p></description></item></channel></rss>